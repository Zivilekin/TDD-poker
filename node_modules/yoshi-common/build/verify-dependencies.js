"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const semver_1 = __importDefault(require("semver"));
const resolve_cwd_1 = __importDefault(require("resolve-cwd"));
const read_pkg_1 = __importDefault(require("read-pkg"));
const helpers_1 = require("./utils/helpers");
const { version: yoshiVersion } = require('../package.json');
async function verifyDependenciesVersions() {
    const relatedPackages = [
        'jest-yoshi-preset',
        'yoshi-style-dependencies',
        'yoshi-angular-dependencies',
    ];
    const outdatedPackages = relatedPackages
        .map(packageName => path_1.default.join(packageName, 'package.json'))
        .map(packageJsonPath => resolve_cwd_1.default.silent(packageJsonPath))
        .filter(helpers_1.isTruthy)
        .map(packageJsonFullPath => {
        const pkg = require(packageJsonFullPath);
        return {
            packageJsonFullPath,
            packageName: pkg.name,
            packageVersion: pkg.version,
        };
    })
        .filter(({ packageVersion }) => {
        const diff = semver_1.default.diff(packageVersion, yoshiVersion);
        return diff && diff.includes('major');
    });
    if (outdatedPackages.length > 0) {
        console.log(chalk_1.default.red('Command failed.\n'));
        console.log(chalk_1.default.red('Packages related to Yoshi should be installed with the same major version as Yoshi:\n'));
        outdatedPackages.forEach(({ packageJsonFullPath, packageName, packageVersion }) => {
            console.log(`  - ${chalk_1.default.bold.red(`${packageName} (${packageVersion}) at ${packageJsonFullPath}`)}`);
        });
        console.log(chalk_1.default.red(`Please install them in the version ${chalk_1.default.bold(yoshiVersion)}.\n`));
        process.exit(1);
    }
}
async function verifyDevDependencies() {
    const devOnlyDependencies = ['yoshi'];
    const { dependencies } = read_pkg_1.default.sync({ cwd: process.cwd() });
    if (dependencies) {
        const depNames = Object.keys(dependencies);
        devOnlyDependencies.forEach(devOnlyDep => {
            if (depNames.includes(devOnlyDep)) {
                console.warn(chalk_1.default.yellow(`You have stated ${devOnlyDep} in 'dependencies', this may cause issues with consumers. please move ${devOnlyDep} to devDependencies`));
            }
        });
    }
}
exports.default = async () => {
    return Promise.all([
        await verifyDependenciesVersions(),
        await verifyDevDependencies(),
    ]);
};
//# sourceMappingURL=verify-dependencies.js.map