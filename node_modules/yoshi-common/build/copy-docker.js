"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const paths_1 = require("yoshi-config/build/paths");
const template_utils_1 = require("./utils/template-utils");
async function default_1(config, cwd = process.cwd()) {
    if (!config.yoshiServer) {
        return;
    }
    const projectDockerExists = fs_extra_1.default.existsSync(path_1.default.resolve(cwd, paths_1.DOCKER_FILE));
    if (!projectDockerExists) {
        const dockerFileName = path_1.default.resolve(__dirname, `./templates/${paths_1.DOCKER_FILE}`);
        const dockerDestinationPath = path_1.default.resolve(cwd, paths_1.DOCKER_FILE);
        fs_extra_1.default.copyFileSync(dockerFileName, dockerDestinationPath);
        const dockerFileContent = fs_extra_1.default.readFileSync(dockerDestinationPath, 'utf-8');
        const author = config.pkgJson.author;
        let name;
        let email;
        if (typeof author === 'object') {
            name = author.name;
            email = author.email || '';
        }
        else {
            name = author || '';
            email = author || '';
        }
        const transformedContent = template_utils_1.replaceTemplates(dockerFileContent, {
            authorEmail: email,
            authorName: name,
        }, { graceful: false });
        fs_extra_1.default.outputFileSync(dockerDestinationPath, transformedContent);
    }
}
exports.default = default_1;
//# sourceMappingURL=copy-docker.js.map