"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBaseWebpackConfig = exports.getStyleLoaders = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const webpack_1 = __importDefault(require("webpack"));
const paths_1 = require("yoshi-config/build/paths");
const resolve_1 = __importDefault(require("resolve"));
const queries_1 = require("yoshi-helpers/build/queries");
// @ts-ignore - missing types
const webpack_stats_plugin_1 = require("webpack-stats-plugin");
// @ts-ignore - missing types
const ModuleNotFoundPlugin_1 = __importDefault(require("react-dev-utils/ModuleNotFoundPlugin"));
const case_sensitive_paths_webpack_plugin_1 = __importDefault(require("case-sensitive-paths-webpack-plugin"));
const utils_1 = require("yoshi-helpers/utils");
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
const optimize_css_assets_webpack_plugin_1 = __importDefault(require("optimize-css-assets-webpack-plugin"));
const cssnano_1 = __importDefault(require("cssnano"));
const copy_webpack_plugin_1 = __importDefault(require("copy-webpack-plugin"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const import_cwd_1 = __importDefault(require("import-cwd"));
const webpack_bundle_analyzer_1 = require("webpack-bundle-analyzer");
const globby_1 = __importDefault(require("globby"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const InterpolateHtmlPlugin_1 = __importDefault(require("react-dev-utils/InterpolateHtmlPlugin"));
// @ts-ignore - missing types
const rtlcss_webpack_plugin_1 = __importDefault(require("rtlcss-webpack-plugin"));
const tpa_style_webpack_plugin_1 = __importDefault(require("tpa-style-webpack-plugin"));
// @ts-ignore - missing types
const mdsvex_1 = require("mdsvex");
const webpackbar_1 = __importDefault(require("webpackbar"));
const is_ci_1 = __importDefault(require("is-ci"));
const utils_2 = require("yoshi-helpers/build/utils");
const node_1 = require("./@stylable/node");
const webpack_plugin_1 = __importStar(require("./@stylable/webpack-plugin"));
const should_transpile_file_1 = __importDefault(require("./utils/should-transpile-file"));
const html_inline_plugin_1 = __importDefault(require("./html-inline-plugin"));
const constants_1 = require("./utils/constants");
const export_default_plugin_1 = __importDefault(require("./export-default-plugin"));
const webpack_utils_1 = require("./webpack-utils");
const manifest_webpack_plugin_1 = __importDefault(require("./manifest-webpack-plugin"));
const create_babel_config_1 = __importDefault(require("./create-babel-config"));
const svelte_server_side_preprocess_1 = __importDefault(require("./svelte-server-side-preprocess"));
const AsyncWebWorkerTarget_1 = require("./AsyncWebWorkerTarget/AsyncWebWorkerTarget");
const source_map_plugin_1 = require("./source-map-plugin");
const html_rendering_data_plugin_1 = __importDefault(require("./html-rendering-data-plugin"));
const isProduction = queries_1.isProduction();
const inTeamCity = queries_1.inTeamCity();
const disableModuleConcat = process.env.DISABLE_MODULE_CONCATENATION === 'true';
const disableStatsOutput = process.env.DISABLE_WEBPACK_STATS_OUTPUT === 'true';
const customAnalyzerPort = process.env.ANALYZE_PORT
    ? Number(process.env.ANALYZE_PORT)
    : null;
const reScript = /\.js?$/;
const reStyle = /\.(css|less|scss|sass)$/;
const reAssets = /\.(png|jpg|jpeg|gif|woff|woff2|ttf|otf|eot|wav|mp3)$/;
const staticAssetName = 'media/[name].[hash:8].[ext]';
const sassIncludePaths = ['node_modules', 'node_modules/compass-mixins/lib'];
function addExtensionPrefix(filePath, prefix) {
    const lastDotIndex = filePath.lastIndexOf('.');
    const extension = filePath.slice(lastDotIndex);
    return `${filePath.slice(0, lastDotIndex)}.${prefix}${extension}`;
}
function prependNameWith(filename, prefix) {
    return filename.replace(/\.[0-9a-z]+$/i, match => `.${prefix}${match}`);
}
function getProgressBarInfo(configName, isDev, isMonorepo, packageName, target) {
    const longestNameLength = 19;
    function getObject() {
        switch (configName) {
            case 'client':
                if (isDev) {
                    return { name: `Client [debug]`, color: 'blue' };
                }
                return { name: `Client [production]`, color: 'green' };
            case 'web-worker':
                if (isDev) {
                    return { name: `Worker [debug]`, color: 'magenta' };
                }
                return { name: `Worker [production]`, color: 'cyan' };
            case 'web-worker-server':
                return { name: `Worker Server`, color: 'orange' };
            case 'server':
                return { name: `Server`, color: 'orange' };
            case 'site-assets':
                if (target === 'web') {
                    return { name: `Site Assets [web]`, color: 'green' };
                }
                return { name: `Site Assets [node]`, color: 'cyan' };
            default:
                return { name: configName, color: 'white' };
        }
    }
    const obj = getObject();
    obj.name = obj.name.padEnd(longestNameLength);
    if (isMonorepo) {
        obj.name = `${utils_2.stripOrganization(packageName)}\n  ${obj.name}`;
    }
    const progressReporter = is_ci_1.default || process.env.PROGRESS_BAR === 'false' ? 'basic' : 'fancy';
    const profileReporter = isProduction && process.env.PROFILE === 'true' ? ['profile'] : [];
    const reporters = [progressReporter, ...profileReporter];
    return Object.assign(Object.assign({}, obj), { reporters });
}
const getCommonStylbleWebpackConfig = (name) => ({
    optimize: {
        classNameOptimizations: false,
        shortNamespaces: false,
    },
    generate: {
        runtimeStylesheetId: 'namespace',
    },
    resolveNamespace: node_1.resolveNamespaceFactory(name),
});
exports.getStyleLoaders = ({ name, embedCss = false, isDev = false, isHot = false, cssModules = true, experimentalRtlCss = false, separateCss = false, tpaStyle = false, useAbsoluteUrlsForCssAssets = false, }) => {
    const cssLoaderOptions = {
        camelCase: true,
        sourceMap: separateCss,
        localIdentName: isProduction ? constants_1.localIdentName.short : constants_1.localIdentName.long,
        // Make sure every package has unique class names
        hashPrefix: name,
        modules: cssModules,
        // PostCSS, less-loader, sass-loader and resolve-url-loader, so
        // composition will work with import
        importLoaders: 4 + Number(tpaStyle),
    };
    return [
        {
            test: reStyle,
            exclude: /\.st\.css$/,
            rules: [
                ...(embedCss
                    ? [
                        ...(isHot
                            ? [{ loader: 'yoshi-style-dependencies/css-hot-loader' }]
                            : []),
                        // Process every style asset with either `style-loader`
                        // or `mini-css-extract-plugin`
                        ...(separateCss
                            ? [
                                {
                                    loader: mini_css_extract_plugin_1.default.loader,
                                    options: {
                                        // By default it use publicPath in webpackOptions.output
                                        // We are overriding it to restore relative paths in url() calls
                                        publicPath: useAbsoluteUrlsForCssAssets
                                            ? undefined
                                            : '',
                                    },
                                },
                            ]
                            : [
                                {
                                    loader: 'yoshi-style-dependencies/style-loader',
                                    options: {
                                        // Reuses a single `<style></style>` element
                                        singleton: true,
                                    },
                                },
                            ]),
                        {
                            oneOf: [
                                // Files ending with `.global.(css|sass|scss|less)` will be transpiled with
                                // `modules: false`
                                {
                                    test: /\.global\.[A-z]*$/,
                                    loader: 'yoshi-style-dependencies/css-loader',
                                    options: Object.assign(Object.assign({}, cssLoaderOptions), { modules: false }),
                                    sideEffects: true,
                                },
                                {
                                    loader: 'yoshi-style-dependencies/css-loader',
                                    options: cssLoaderOptions,
                                },
                            ],
                        },
                        {
                            loader: 'yoshi-style-dependencies/postcss-loader',
                            options: {
                                // https://github.com/facebookincubator/create-react-app/issues/2677
                                ident: 'postcss',
                                plugins: [
                                    experimentalRtlCss && require('postcss-rtl')(),
                                    require('autoprefixer')({
                                        overrideBrowserslist: [
                                            '> 0.5%',
                                            'last 2 versions',
                                            'Firefox ESR',
                                            'not dead',
                                            'ie >= 11',
                                        ].join(','),
                                        flexbox: 'no-2009',
                                    }),
                                ].filter(Boolean),
                                sourceMap: isDev,
                            },
                        },
                        {
                            loader: 'yoshi-style-dependencies/resolve-url-loader',
                        },
                    ]
                    : [
                        {
                            loader: 'yoshi-style-dependencies/css-loader',
                            options: Object.assign(Object.assign({}, cssLoaderOptions), { importLoaders: 2 + Number(tpaStyle), exportOnlyLocals: true, sourceMap: false }),
                        },
                    ]),
                ...(tpaStyle ? [{ loader: 'wix-tpa-style-loader' }] : []),
                {
                    test: /\.less$/,
                    loader: 'less-loader',
                    options: {
                        sourceMap: embedCss,
                        paths: ['.', 'node_modules'],
                    },
                },
                {
                    test: /\.(scss|sass)$/,
                    loader: 'yoshi-style-dependencies/sass-loader',
                    options: {
                        sourceMap: embedCss,
                        implementation: import_cwd_1.default.silent('yoshi-style-dependencies/node-sass'),
                        includePaths: sassIncludePaths,
                    },
                },
            ],
        },
    ];
};
function createBaseWebpackConfig({ configName, name, target, isDev = false, isHot = false, useTypeScript = false, typeCheckTypeScript = false, useAngular = false, separateCss = false, keepFunctionNames = false, suricate = false, isMonorepo = false, separateStylableCss = false, experimentalRtlCss = false, cssModules = true, cwd = process.cwd(), devServerUrl, externalizeRelativeLodash = false, isAnalyze = false, createEjsTemplates = false, performanceBudget, includeStyleLoaders = true, includeInTranspilation = should_transpile_file_1.default, enhancedTpaStyle = false, tpaStyle = false, forceEmitSourceMaps = false, exportAsLibraryName, nodeExternalsWhitelist = [], useAssetRelocator = false, useYoshiServer = false, useProgressBar = true, createWorkerManifest = true, useCustomSourceMapPlugin = false, forceEmitStats = false, forceMinimizeServer = false, useAbsoluteUrlsForCssAssets = false, serverExternals, umdNamedDefine = false, transpileCarmiOutput = false, }) {
    const join = (...dirs) => path_1.default.join(cwd, ...dirs);
    const styleLoaders = exports.getStyleLoaders({
        name,
        embedCss: target !== 'node',
        cssModules,
        isDev,
        isHot,
        experimentalRtlCss,
        separateCss,
        tpaStyle,
        useAbsoluteUrlsForCssAssets,
    });
    const publicPath = webpack_utils_1.calculatePublicPath({
        suricate,
        appName: name,
        devServerUrl,
        // https://github.com/wix/yoshi/pull/1803
        useUnversionedBaseUrl: createEjsTemplates && !isDev,
    });
    const babelConfig = create_babel_config_1.default({
        modules: false,
        targets: target === 'node' ? 'current node' : undefined,
    });
    const notExternalModules = [
        reStyle,
        reAssets,
        /node_modules\/bootstrap-hot-loader/,
        ...nodeExternalsWhitelist,
    ];
    const isBrowser = process.env.BROWSER !== 'none';
    // We can take value from env variable mostly for internal purposes and not opening this option to be 'public'
    // 'auto' should satisfy all user's needs. It will auto generate available port and use it.
    const analyzerPort = customAnalyzerPort || (isBrowser ? 'auto' : undefined);
    const terserOptions = {
        parallel: true,
        cache: true,
        sourceMap: true,
        terserOptions: {
            output: {
                ascii_only: true,
            },
            keep_fnames: keepFunctionNames,
        },
    };
    const config = Object.assign(Object.assign({ context: join(paths_1.SRC_DIR), name: configName, mode: isProduction ? 'production' : 'development', output: Object.assign(Object.assign(Object.assign({ path: join(paths_1.STATICS_DIR), publicPath, pathinfo: isDev, filename: isDev
                ? '[name].bundle.js'
                : createEjsTemplates
                    ? '[name].[contenthash:8].bundle.min.js'
                    : '[name].bundle.min.js', chunkFilename: isDev
                ? '[name].chunk.js'
                : createEjsTemplates
                    ? '[name].[contenthash:8].chunk.min.js'
                    : '[name].chunk.min.js', hotUpdateMainFilename: 'updates/[hash].hot-update.json', hotUpdateChunkFilename: 'updates/[id].[hash].hot-update.js' }, (exportAsLibraryName
            ? {
                library: exportAsLibraryName,
                libraryTarget: 'umd',
                umdNamedDefine,
                globalObject: "(typeof self !== 'undefined' ? self : this)",
            }
            : {})), (target === 'node'
            ? {
                path: join(paths_1.BUILD_DIR),
                filename: '[name].js',
                chunkFilename: `${paths_1.SERVER_CHUNKS_DIR}/[name].js`,
                libraryTarget: 'umd',
                umdNamedDefine,
                globalObject: "(typeof self !== 'undefined' ? self : this)",
                // Point sourcemap entries to original disk location (format as URL on Windows)
                // todo: remove once useCustomSourceMapPlugin option is getting merged
                devtoolModuleFilenameTemplate: info => path_1.default.resolve(info.absoluteResourcePath).replace(/\\/g, '/'),
            }
            : {})), { 
            // https://github.com/wix/yoshi/pull/497
            jsonpFunction: `webpackJsonp_${utils_1.toIdentifier(name)}`, 
            // @ts-ignore Not available in @types/webpack
            // https://webpack.js.org/configuration/output/#outputchunkcallbackname
            chunkCallbackName: `webpackWorker_${utils_1.toIdentifier(name)}` }), resolve: {
            modules: ['node_modules', join(paths_1.SRC_DIR)],
            extensions: ['.mjs', '.js', '.jsx', '.ts', '.tsx', '.svelte', '.json'],
            mainFields: [
                'svelte',
                ...(target === 'node' ? [] : ['browser']),
                'module',
                'main',
            ],
        }, resolveLoader: {
            modules: [
                // Search in `yoshi-common`'s node_modules first
                path_1.default.join(__dirname, '../node_modules'),
                path_1.default.join(__dirname, '../../../node_modules'),
                // Normal node module resolution
                // https://webpack.js.org/configuration/resolve/#resolvemodules
                'node_modules',
            ],
        }, optimization: target !== 'node'
            ? Object.assign(Object.assign({ minimize: !isDev, concatenateModules: isProduction && !disableModuleConcat, minimizer: [
                    new terser_webpack_plugin_1.default(terserOptions),
                    new optimize_css_assets_webpack_plugin_1.default({
                        cssProcessor: cssnano_1.default,
                        cssProcessorPluginOptions: {
                            preset: [
                                'default',
                                {
                                    // These bugs prevents us from using mergeLonghand plugin:
                                    // https://github.com/cssnano/cssnano/issues/675
                                    // https://github.com/cssnano/cssnano/issues/847
                                    mergeLonghand: false,
                                },
                            ],
                        },
                    }),
                ] }, (createEjsTemplates && target === 'web'
                ? {
                    runtimeChunk: {
                        name: 'webpack-runtime',
                    },
                }
                : {})), { splitChunks: false }) : {
            // Do not modify/set the value of `process.env.NODE_ENV`
            nodeEnv: false,
            // Faster build time and possibly easier debugging
            minimize: forceMinimizeServer,
            minimizer: [new terser_webpack_plugin_1.default(terserOptions)],
        }, plugins: [
            new ModuleNotFoundPlugin_1.default(cwd),
            new case_sensitive_paths_webpack_plugin_1.default(),
            ...(useTypeScript && typeCheckTypeScript && isDev
                ? [
                    new (require('fork-ts-checker-webpack-plugin'))({
                        tsconfig: join(paths_1.TSCONFIG_FILE),
                        async: false,
                        silent: true,
                        checkSyntacticErrors: true,
                        formatter: require('react-dev-utils/typescriptFormatter'),
                    }),
                ]
                : []),
            ...(isHot ? [new webpack_1.default.HotModuleReplacementPlugin()] : []),
            ...(target === 'web' && createEjsTemplates
                ? [
                    new html_rendering_data_plugin_1.default({
                        outputFileName: isDev
                            ? 'html-rendering-data.json'
                            : 'html-rendering-data.min.json',
                    }),
                ]
                : []),
            ...(target === 'web'
                ? [
                    ...(createEjsTemplates && fs_extra_1.default.pathExistsSync(join(paths_1.TEMPLATES_DIR))
                        ? [
                            ...globby_1.default
                                .sync('**/*.+(ejs|vm)', {
                                cwd: join(paths_1.TEMPLATES_DIR),
                                absolute: true,
                            })
                                .map(templatePath => {
                                const basename = path_1.default.basename(templatePath);
                                const filename = join(paths_1.TEMPLATES_BUILD_DIR, basename);
                                const customLoader = require.resolve('./lodash-template-loader');
                                return new html_webpack_plugin_1.default({
                                    filename: isDev
                                        ? filename
                                        : prependNameWith(filename, 'min'),
                                    template: `${customLoader}!${templatePath}`,
                                    minify: false,
                                    inject: false,
                                    templateParameters: (compilation, assets, assetTags, options) => {
                                        // Add `async` attribute to all non-inline scripts
                                        assetTags.bodyTags.forEach(tag => {
                                            if (tag.tagName === 'script' &&
                                                tag.attributes.src) {
                                                tag.attributes.async = '';
                                            }
                                        });
                                        // Values available for injection in EJS template
                                        return {
                                            compilation,
                                            webpackConfig: compilation.options,
                                            tags: {
                                                css: assetTags.headTags,
                                                js: assetTags.bodyTags,
                                            },
                                            files: assets,
                                            options,
                                        };
                                    },
                                });
                            }),
                            new html_inline_plugin_1.default(html_webpack_plugin_1.default, [
                                /\.css|\.inline|webpack-runtime/,
                            ]),
                            new InterpolateHtmlPlugin_1.default(html_webpack_plugin_1.default, {
                                PUBLIC_PATH: publicPath,
                            }),
                        ]
                        : []),
                    ...(fs_extra_1.default.pathExistsSync(paths_1.PUBLIC_DIR)
                        ? [
                            new copy_webpack_plugin_1.default([
                                { from: join(paths_1.PUBLIC_DIR), to: join(paths_1.ASSETS_DIR) },
                            ]),
                        ]
                        : []),
                    new webpack_1.default.LoaderOptionsPlugin({
                        minimize: !isDev,
                    }),
                    ...(separateCss
                        ? [
                            new mini_css_extract_plugin_1.default({
                                filename: isDev
                                    ? '[name].css'
                                    : createEjsTemplates
                                        ? '[name].[contenthash:8].min.css'
                                        : '[name].min.css',
                                chunkFilename: isDev
                                    ? '[name].chunk.css'
                                    : createEjsTemplates
                                        ? '[name].[contenthash:8].chunk.min.css'
                                        : '[name].chunk.min.css',
                            }),
                            ...(enhancedTpaStyle
                                ? [
                                    // @ts-ignore
                                    new tpa_style_webpack_plugin_1.default(),
                                ]
                                : []),
                            ...(!createEjsTemplates && !experimentalRtlCss
                                ? [
                                    new rtlcss_webpack_plugin_1.default(isDev ? '[name].rtl.css' : '[name].rtl.min.css'),
                                ]
                                : []),
                        ]
                        : []),
                    new webpack_1.default.IgnorePlugin(/^\.\/locale$/, /moment$/),
                    new webpack_plugin_1.default(Object.assign(Object.assign({}, getCommonStylbleWebpackConfig(name)), { filename: isDev
                            ? '[name].stylable.bundle.css'
                            : createEjsTemplates
                                ? '[name].[hash:8].stylable.bundle.css'
                                : '[name].stylable.bundle.css', outputCSS: separateStylableCss, includeCSSInJS: !separateStylableCss, runtimeMode: 'shared', globalRuntimeId: webpack_plugin_1.globalRuntimeId })),
                    // site-assets manifest is handled with its own plugin
                    ...(configName !== 'site-assets'
                        ? [new manifest_webpack_plugin_1.default({ fileName: 'manifest', isDev })]
                        : []),
                ]
                : []),
            ...(createWorkerManifest &&
                (target === 'webworker' || target === 'async-webworker')
                ? [new manifest_webpack_plugin_1.default({ fileName: 'manifest-worker', isDev })]
                : []),
            new webpack_1.default.DefinePlugin(Object.assign(Object.assign({}, (target !== 'node'
                ? {
                    'process.env.NODE_ENV': JSON.stringify(isProduction ? 'production' : 'development'),
                    'process.env.IS_MINIFIED': isDev ? 'false' : 'true',
                    'window.__CI_APP_VERSION__': JSON.stringify(process.env.ARTIFACT_VERSION
                        ? process.env.ARTIFACT_VERSION
                        : '0.0.0'),
                    'process.env.ARTIFACT_ID': JSON.stringify(utils_1.getProjectArtifactId()),
                }
                : {})), { 'process.env.PACKAGE_NAME': JSON.stringify(utils_2.stripOrganization(name)), 'process.env.browser': JSON.stringify(target !== 'node') })),
            ...(target === 'node'
                ? [
                    new export_default_plugin_1.default(),
                    new webpack_1.default.BannerPlugin({
                        banner: fs_extra_1.default.readFileSync(path_1.default.join(__dirname, 'utils/source-map-support.js'), 'utf-8'),
                        raw: true,
                        entryOnly: false,
                    }),
                    new webpack_plugin_1.default(Object.assign(Object.assign({}, getCommonStylbleWebpackConfig(name)), { outputCSS: false, includeCSSInJS: false })),
                ]
                : []),
            ...(isAnalyze
                ? [
                    new webpack_bundle_analyzer_1.BundleAnalyzerPlugin({
                        openAnalyzer: isBrowser,
                        analyzerPort,
                    }),
                ]
                : []),
            ...(forceEmitStats ||
                (inTeamCity && isProduction && !isDev && !disableStatsOutput)
                ? [
                    new webpack_stats_plugin_1.StatsWriterPlugin({
                        // The plugin does not accept absolute path, so we have to navigate relatively from bundle location
                        // /dist/statics to stats file /target/webpack-stats.json
                        filename: path_1.default.join('../../', configName === 'client'
                            ? paths_1.STATS_FILE
                            : addExtensionPrefix(paths_1.STATS_FILE, configName)),
                        stats: {
                            all: true,
                            source: false,
                            chunkModules: false,
                            chunkRootModules: false,
                            maxModules: Infinity,
                        },
                    }),
                ]
                : []),
            ...(useCustomSourceMapPlugin
                ? target === 'node'
                    ? [source_map_plugin_1.sourceMapPlugin({ inline: true, showPathOnDisk: true })]
                    : inTeamCity || forceEmitSourceMaps
                        ? [source_map_plugin_1.sourceMapPlugin({ publicPath })]
                        : !isProduction
                            ? [
                                source_map_plugin_1.sourceMapPlugin({
                                    cheap: true,
                                    moduleMaps: true,
                                    evaluate: true,
                                }),
                            ]
                            : []
                : []),
            ...(useProgressBar
                ? [
                    new webpackbar_1.default(getProgressBarInfo(configName, isDev, isMonorepo, name, target)),
                ]
                : []),
        ], devtool: useCustomSourceMapPlugin
            ? false
            : target !== 'node'
                ? inTeamCity || forceEmitSourceMaps
                    ? 'source-map'
                    : !isProduction
                        ? 'cheap-module-eval-source-map'
                        : false
                : 'inline-source-map', module: {
            // Makes missing exports an error instead of warning
            strictExportPresence: true,
            // carmi returns a big blob of code which doesn't contain "require"/"import"
            // calls for other files and therefore don't need to be parsed by webpack
            // this improves the build time for Thunderbolt
            // https://webpack.js.org/configuration/module/#modulenoparse
            noParse: /\.carmi.(js|ts)$/,
            rules: [
                ...(useAssetRelocator && target === 'node'
                    ? [
                        {
                            test: /\.(js|ts|tsx)$/,
                            parser: { amd: false },
                            use: {
                                loader: '@zeit/webpack-asset-relocator-loader',
                                options: {
                                    outputAssetBase: 'assets',
                                    existingAssetNames: [],
                                    wrapperCompatibility: true,
                                    escapeNonAnalyzableRequires: true,
                                },
                            },
                        },
                    ]
                    : []),
                ...(includeStyleLoaders ? styleLoaders : []),
                ...(externalizeRelativeLodash
                    ? [
                        {
                            test: /[\\/]node_modules[\\/]lodash[\\/]\w+/,
                            loader: 'externalize-relative-module-loader',
                        },
                    ]
                    : []),
                {
                    test: /\.(svelte|svx)$/,
                    // Both, `svelte-loader` and `svelte-preprocess-sass` should be installed
                    // by the project that needs it.
                    //
                    // If more users use `svelte` we'll consider adding it to everyone by default.
                    loader: 'svelte-loader',
                    options: {
                        immutable: true,
                        hydratable: true,
                        // https://github.com/sveltejs/svelte-loader/issues/67
                        onwarn: (warning, onwarn) => {
                            warning.code === 'css-unused-selector' || onwarn(warning);
                        },
                        preprocess: [
                            {
                                style: import_cwd_1.default.silent('svelte-preprocess-sass') &&
                                    import_cwd_1.default.silent('svelte-preprocess-sass').sass({
                                        includePaths: sassIncludePaths,
                                    }),
                            },
                            mdsvex_1.mdsvex({
                                extension: '.svx',
                            }),
                            ...(target === 'node'
                                ? [
                                    svelte_server_side_preprocess_1.default({
                                        packageName: name,
                                        cwd,
                                    }),
                                ]
                                : []),
                        ],
                        dev: isDev,
                        emitCss: target !== 'node',
                        generate: target === 'node' ? 'ssr' : 'dom',
                    },
                },
                ...(useYoshiServer
                    ? [
                        Object.assign(Object.assign({ test: /\.api\.(js|ts)$/ }, (target === 'node'
                            ? {
                                issuer: () => true,
                            }
                            : {})), { loader: require.resolve('yoshi-server-tools/build/loader') }),
                    ]
                    : []),
                ...(useAngular
                    ? [
                        {
                            test: reScript,
                            loader: 'yoshi-angular-dependencies/ng-annotate-loader',
                            include: should_transpile_file_1.default,
                        },
                    ]
                    : []),
                {
                    test: /\.inline\.worker\.(js|tsx?)$/,
                    use: [
                        {
                            loader: 'worker-loader',
                            options: {
                                inline: true,
                            },
                        },
                    ],
                },
                {
                    test: /\.(ts|tsx)$/,
                    // Don't transpile the output of Carmi with Babel/TypeScript
                    // https://github.com/wix/yoshi/pull/2227
                    exclude: /\.carmi.(js|ts)$/,
                    include: includeInTranspilation,
                    use: [
                        {
                            loader: 'thread-loader',
                            options: {
                                workers: os_1.default.cpus().length - 1,
                            },
                        },
                        ...(useAngular
                            ? [{ loader: 'yoshi-angular-dependencies/ng-annotate-loader' }]
                            : []),
                        {
                            loader: 'ts-loader',
                            options: {
                                happyPackMode: true,
                                compilerOptions: useAngular
                                    ? {}
                                    : Object.assign({ module: 'esnext', moduleResolution: 'node' }, (process.env.NODE_ENV === 'development'
                                        ? {
                                            lib: ['es2017'],
                                            target: 'es2017',
                                        }
                                        : {})),
                            },
                        },
                    ],
                },
                {
                    test: reScript,
                    include: includeInTranspilation,
                    // Optimize JS processing worker stuff excluded due to
                    // https://github.com/webpack-contrib/worker-loader/issues/177
                    exclude: [/\.inline\.worker\.js/, /\.carmi.(js|ts)$/],
                    use: [
                        {
                            loader: 'thread-loader',
                            options: {
                                workers: os_1.default.cpus().length - 1,
                            },
                        },
                    ],
                },
                ...(transpileCarmiOutput
                    ? [
                        {
                            test: /\.carmi.(js|ts)$/,
                            include: includeInTranspilation,
                            use: [
                                {
                                    loader: 'babel-loader',
                                    options: Object.assign(Object.assign({}, babelConfig), { 
                                        // Carmi files are quite big and this option
                                        // prevents from a warning to be showing during the build
                                        // https://babeljs.io/docs/en/options#compact
                                        compact: true, sourceMaps: false }),
                                },
                            ],
                        },
                    ]
                    : []),
                {
                    test: reScript,
                    // Don't transpile the output of Carmi with Babel/TypeScript
                    // https://github.com/wix/yoshi/pull/2227
                    exclude: /\.carmi.js$/,
                    include: includeInTranspilation,
                    use: [
                        {
                            loader: 'babel-loader',
                            options: Object.assign({}, babelConfig),
                        },
                    ],
                },
                {
                    oneOf: [
                        {
                            test: /\.inline\.svg$/,
                            loader: 'svg-inline-loader',
                        },
                        {
                            test: /\.svg$/,
                            issuer: {
                                test: /\.(j|t)sx?$/,
                            },
                            use: [
                                {
                                    loader: '@svgr/webpack',
                                    options: {
                                        svgoConfig: {
                                            plugins: {
                                                removeViewBox: false,
                                            },
                                        },
                                    },
                                },
                                {
                                    loader: 'svg-url-loader',
                                    options: {
                                        iesafe: true,
                                        noquotes: true,
                                        limit: 10000,
                                        name: staticAssetName,
                                    },
                                },
                            ],
                        },
                        {
                            test: /\.svg$/,
                            use: [
                                {
                                    loader: 'svg-url-loader',
                                    options: {
                                        iesafe: true,
                                        limit: 10000,
                                        name: staticAssetName,
                                    },
                                },
                            ],
                        },
                        {
                            test: /\.carmi.(js|ts)$/,
                            exclude: /node_modules/,
                            // Not installed by Yoshi and should be installed by the project that needs it.
                            loader: 'carmi/loader',
                        },
                        {
                            test: /\.md$/,
                            loader: 'raw-loader',
                        },
                        {
                            test: /\.haml$/,
                            loader: 'ruby-haml-loader',
                        },
                        {
                            test: /\.html$/,
                            loader: 'html-loader',
                        },
                        {
                            test: /\.(graphql|gql)$/,
                            loader: 'graphql-tag/loader',
                        },
                        {
                            test: reAssets,
                            loader: 'url-loader',
                            options: {
                                name: staticAssetName,
                                limit: 10000,
                                emitFile: target !== 'node',
                            },
                        },
                    ],
                },
            ],
        }, stats: 'none', node: target !== 'node'
            ? {
                fs: 'empty',
                net: 'empty',
                tls: 'empty',
                __dirname: true,
            }
            : {
                console: false,
                global: false,
                process: false,
                Buffer: false,
                __filename: false,
                __dirname: false,
            } }, (target === 'node'
        ? {
            externals: serverExternals || [
                (context, request, callback) => {
                    let res;
                    try {
                        res = resolve_1.default.sync(request, { basedir: `${context}/` });
                    }
                    catch (err) {
                        // If the request cannot be resolved, we need to tell webpack to
                        // "bundle" it so that webpack shows an error (that it cannot be
                        // resolved).
                        return callback();
                    }
                    // Same as above, if the request cannot be resolved we need to have
                    // webpack "bundle" it so it surfaces the not found error.
                    if (!res) {
                        return callback();
                    }
                    // Webpack itself has to be compiled because it doesn't always use module relative paths
                    if (res.match(/node_modules[/\\]webpack/) ||
                        res.match(/node_modules[/\\]css-loader/)) {
                        return callback();
                    }
                    // Bundle any white listed dependencies
                    if (notExternalModules.some(regex => regex.test(res))) {
                        return callback();
                    }
                    // Anything else that is within `node_modules` is externalized.
                    if (res.match(/node_modules/)) {
                        return callback(undefined, `commonjs ${request}`);
                    }
                    // Default behavior: bundle the code!
                    callback();
                },
            ],
        }
        : {})), (target === 'web'
        ? {
            performance: Object.assign({}, (isProduction
                ? performanceBudget || { hints: false }
                : {
                    hints: false,
                })),
        }
        : {}));
    config.target =
        target === 'async-webworker' ? AsyncWebWorkerTarget_1.asyncWebWorkerTarget(config) : target;
    return config;
}
exports.createBaseWebpackConfig = createBaseWebpackConfig;
//# sourceMappingURL=webpack.config.js.map