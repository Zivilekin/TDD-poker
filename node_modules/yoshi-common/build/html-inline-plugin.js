"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class HtmlInlinePlugin {
    constructor(htmlWebpackPlugin, tests) {
        this.htmlWebpackPlugin = htmlWebpackPlugin;
        this.tests = tests;
    }
    findAsset(publicPath, assets, tag, attributeName) {
        if (!(tag.attributes && tag.attributes[attributeName])) {
            return null;
        }
        const scriptName = publicPath
            ? tag.attributes[attributeName].replace(publicPath, '')
            : tag.attributes[attributeName];
        const asset = assets[scriptName];
        if (asset === null) {
            return null;
        }
        if (!this.tests.some(test => scriptName.match(test))) {
            return null;
        }
        return asset;
    }
    getInlinedTag(publicPath, assets, tag) {
        switch (tag.tagName) {
            case 'script': {
                const asset = this.findAsset(publicPath, assets, tag, 'src');
                if (!asset) {
                    return tag;
                }
                return {
                    tagName: 'script',
                    innerHTML: asset.source(),
                    attributes: {},
                    voidTag: false,
                };
            }
            case 'link': {
                const asset = this.findAsset(publicPath, assets, tag, 'href');
                if (!asset) {
                    return tag;
                }
                return {
                    tagName: 'style',
                    innerHTML: asset.source(),
                    attributes: {},
                    voidTag: false,
                };
            }
            default: {
                return tag;
            }
        }
    }
    apply(compiler) {
        var _a, _b, _c;
        let publicPath = (_c = (_b = (_a = compiler.options) === null || _a === void 0 ? void 0 : _a.output) === null || _b === void 0 ? void 0 : _b.publicPath) !== null && _c !== void 0 ? _c : '';
        if (publicPath && !publicPath.endsWith('/')) {
            publicPath += '/';
        }
        compiler.hooks.compilation.tap('HtmlInlinePlugin', compilation => {
            const tagFunction = (tag) => this.getInlinedTag(publicPath, compilation.assets, tag);
            // @ts-ignore
            const hooks = this.htmlWebpackPlugin.getHooks(compilation);
            hooks.alterAssetTagGroups.tap('HtmlInlinePlugin', assets => {
                assets.headTags = assets.headTags.map(tagFunction);
                assets.bodyTags = assets.bodyTags.map(tagFunction);
                return assets;
            });
        });
    }
}
exports.default = HtmlInlinePlugin;
//# sourceMappingURL=html-inline-plugin.js.map