"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
// eslint-disable-next-line import/no-extraneous-dependencies
const babel = __importStar(require("@babel/core"));
const globby_1 = __importDefault(require("globby"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chokidar = __importStar(require("chokidar"));
const paths_1 = require("yoshi-config/build/paths");
const copy_files_1 = __importDefault(require("./copy-files"));
const stripExtension = (filePath) => {
    return filePath.replace(path_1.default.extname(filePath), '');
};
function transpileFile({ filePath, cwd }) {
    const abosoluteFilePath = path_1.default.join(cwd, paths_1.SRC_DIR, filePath);
    const filePathInBuildDir = path_1.default.join(cwd, paths_1.CJS_DIR, filePath);
    const content = fs_extra_1.default.readFileSync(abosoluteFilePath, 'utf-8');
    const relativeSourceFileName = path_1.default.relative(path_1.default.dirname(filePathInBuildDir), abosoluteFilePath);
    const transpiledContent = babel.transform(content, {
        filename: filePathInBuildDir,
        sourceFileName: relativeSourceFileName,
        sourceMaps: true,
        presets: [
            [
                require.resolve('@babel/preset-typescript'),
                { isTSX: true, allExtensions: true },
            ],
            [require.resolve('babel-preset-yoshi'), { mode: 'test' }],
        ],
    });
    const filePathInBuildDirNoExtensions = stripExtension(filePathInBuildDir);
    const mapFilePath = `${filePathInBuildDirNoExtensions}.js.map`;
    fs_extra_1.default.outputFileSync(mapFilePath, JSON.stringify(transpiledContent === null || transpiledContent === void 0 ? void 0 : transpiledContent.map));
    const sourceMappingURLComment = `\n//# sourceMappingURL=${path_1.default.basename(mapFilePath)}`;
    fs_extra_1.default.outputFileSync(`${filePathInBuildDirNoExtensions}.js`, (transpiledContent === null || transpiledContent === void 0 ? void 0 : transpiledContent.code) + sourceMappingURLComment);
}
exports.default = ({ watch = false, copyFiles = true, cwd, }) => {
    const tsFilesGlobPattern = ['**/*.js', '**/*.ts', '**/*.tsx', '**/*.json'];
    const absoluteRootDir = path_1.default.join(cwd, paths_1.SRC_DIR);
    const tsFiles = globby_1.default.sync(tsFilesGlobPattern, {
        cwd: absoluteRootDir,
    });
    const _transpileFile = (filePath) => transpileFile({ filePath, cwd });
    tsFiles.forEach(_transpileFile);
    const gracefullTranspileFile = (filePath) => {
        try {
            _transpileFile(filePath);
        }
        catch (error) {
            // We don't want to throw in case there is a babel parsing error
            // This happens during watch mode
            // Throwing an error and exiting the watch mode is not good
            console.error(error);
        }
    };
    if (copyFiles) {
        copy_files_1.default({ watch, outDir: paths_1.CJS_DIR, rootDir: paths_1.SRC_DIR, cwd });
    }
    if (watch) {
        const watcher = chokidar.watch(tsFilesGlobPattern, {
            cwd: absoluteRootDir,
            ignoreInitial: true,
        });
        watcher
            .on('add', gracefullTranspileFile)
            .on('change', gracefullTranspileFile);
    }
};
//# sourceMappingURL=run-babel.js.map