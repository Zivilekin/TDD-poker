"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.enforceTsconfig = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const chalk_1 = __importDefault(require("chalk"));
const isEqual_1 = __importDefault(require("lodash/isEqual"));
const paths_1 = require("yoshi-config/build/paths");
const write_json_1 = __importDefault(require("../write-json"));
const ensure_typescript_installed_1 = __importDefault(require("./ensure-typescript-installed"));
const compilerOptions = {
    // These are suggested values and will be set when not present in tsconfig.json
    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },
    skipLibCheck: { suggested: true },
    esModuleInterop: { suggested: true },
    allowSyntheticDefaultImports: { suggested: true },
    strict: { suggested: true },
    noEmit: { suggested: false },
    importHelpers: { suggested: true },
    jsx: { suggested: 'react' },
    forceConsistentCasingInFileNames: { suggested: true },
    noFallthroughCasesInSwitch: { suggested: true },
    // These values are required and cannot be changed by the user
    // Keep this in sync with babel transpilation and the webpack config
    target: {
        value: 'ES5',
        reason: 'this is needed to support IE 11',
    },
    module: {
        value: 'ESNext',
        reason: 'for import() and import/export',
    },
    rootDir: {
        value: paths_1.SRC_DIR,
        reason: 'to match babel & webpack',
    },
    outDir: {
        value: paths_1.ES_DIR,
        reason: 'to always output into `esm` directory',
    },
    declarationDir: {
        value: paths_1.TYPES_DIR,
        reason: 'to always d.ts files into `types` directory',
    },
    declaration: {
        value: true,
        reason: 'to always emit declarations',
    },
    moduleResolution: {
        value: 'node',
        reason: 'to match webpack module resolution',
    },
    resolveJsonModule: { value: true, reason: 'to match webpack ts loader' },
};
exports.enforceTsconfig = ({ cwd }) => {
    const ts = ensure_typescript_installed_1.default();
    const userTsconfigPath = path_1.default.join(cwd, `tsconfig.json`);
    const { config: userTsConfig, error, } = ts.readConfigFile(userTsconfigPath, ts.sys.readFile);
    if (error) {
        const formatDiagnosticHost = {
            getCanonicalFileName: (fileName) => fileName,
            getCurrentDirectory: ts.sys.getCurrentDirectory,
            getNewLine: () => os_1.default.EOL,
        };
        throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost));
    }
    const messages = [];
    Object.keys(compilerOptions).forEach(option => {
        // @ts-ignore
        const { value, suggested, reason } = compilerOptions[option];
        const coloredOption = chalk_1.default.cyan('compilerOptions.' + option);
        if (suggested != null &&
            // @ts-ignore
            userTsConfig.compilerOptions[option] === undefined) {
            // @ts-ignore
            userTsConfig.compilerOptions[option] = suggested;
            messages.push(`${coloredOption} to be ${chalk_1.default.bold('suggested')} value: ${chalk_1.default.cyan.bold(suggested)} (this can be changed)`);
            // @ts-ignore
        }
        else if (value && !isEqual_1.default(userTsConfig.compilerOptions[option], value)) {
            // @ts-ignore
            userTsConfig.compilerOptions[option] = value;
            messages.push(`${coloredOption} ${chalk_1.default.bold(value == null ? 'must not' : 'must')} be ${value == null ? 'set' : chalk_1.default.cyan.bold(value)}` +
                (reason != null ? ` (${reason})` : ''));
        }
    });
    if (userTsConfig.include == null) {
        userTsConfig.include = ['src'];
        messages.push(`${chalk_1.default.cyan('include')} should be ${chalk_1.default.cyan.bold('src')}`);
    }
    if (messages.length > 0) {
        console.warn(chalk_1.default.bold('The following changes are being made to your', chalk_1.default.cyan('tsconfig.json'), 'file:'));
        messages.forEach(message => {
            console.warn('  - ' + message);
        });
        console.warn();
        write_json_1.default(userTsconfigPath, userTsConfig);
    }
};
//# sourceMappingURL=tsconfig-enforcer.js.map