"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const globby_1 = __importDefault(require("globby"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chokidar = __importStar(require("chokidar"));
exports.default = ({ watch = false, cwd, outDir, rootDir, }) => {
    function getBuildAssetPath(assetPath) {
        const absolutOutDirPath = path_1.default.join(cwd, outDir);
        return path_1.default.join(absolutOutDirPath, path_1.default.relative(rootDir, assetPath));
    }
    function removeFromOutDir(assetPath) {
        const buildAssetPath = getBuildAssetPath(assetPath);
        fs_extra_1.default.removeSync(buildAssetPath);
    }
    function copyToOutDir(assetPath) {
        const originAssetPath = path_1.default.join(cwd, assetPath);
        const buildAssetPath = getBuildAssetPath(assetPath);
        fs_extra_1.default.ensureDirSync(path_1.default.dirname(buildAssetPath));
        fs_extra_1.default.copyFileSync(originAssetPath, buildAssetPath);
    }
    const filesGlobPattern = path_1.default.join(rootDir, '**/*');
    const ignoredFiles = ['**/*.js', '**/*.ts', '**/*.tsx', '**/*.json'];
    if (watch) {
        const watcher = chokidar.watch(filesGlobPattern, {
            cwd,
            ignored: ignoredFiles,
        });
        watcher
            .on('add', assetPath => copyToOutDir(assetPath))
            .on('change', assetPath => copyToOutDir(assetPath))
            .on('unlink', assetPath => removeFromOutDir(assetPath));
    }
    else {
        const assets = globby_1.default.sync(filesGlobPattern, {
            cwd,
            ignore: ignoredFiles,
        });
        assets.forEach(assetPath => copyToOutDir(assetPath));
    }
};
//# sourceMappingURL=copy-files.js.map