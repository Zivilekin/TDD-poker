"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startCDN = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const compression_1 = __importDefault(require("compression"));
const paths_1 = require("yoshi-config/build/paths");
function getSslCertificate() {
    const customCertPath = process.env.CUSTOM_CERT_PATH;
    const customCertKeyPath = process.env.CUSTOM_CERT_KEY_PATH;
    if (customCertPath && customCertKeyPath) {
        return {
            cert: customCertPath,
            key: customCertKeyPath,
        };
    }
    return {
        cert: fs_1.default.readFileSync(require.resolve('yoshi-helpers/certificates/server.cert'), 'utf-8'),
        key: fs_1.default.readFileSync(require.resolve('yoshi-helpers/certificates/server.key'), 'utf-8'),
        passphrase: '1234',
    };
}
async function startCDN({ port, ssl, cwd, }) {
    const app = express_1.default();
    app.use(cors_1.default());
    app.use(compression_1.default());
    app.use(express_1.default.static(path_1.default.join(cwd, paths_1.STATICS_DIR)));
    const server = ssl
        ? https_1.default.createServer(getSslCertificate(), app)
        : http_1.default.createServer(app);
    await new Promise(resolve => server.listen(port, resolve));
    return {
        close: () => new Promise(resolve => server.close(resolve)),
    };
}
exports.startCDN = startCDN;
//# sourceMappingURL=cdn.js.map