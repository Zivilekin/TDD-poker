"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printBuildResult = exports.printServerBuildResult = exports.printClientBuildResult = exports.printBundleSizeSuggestion = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const filesize_1 = __importDefault(require("filesize"));
const gzip_size_1 = require("gzip-size");
function printBundleSizeSuggestion() {
    console.log(chalk_1.default.dim('    Interested in reducing your bundle size?'));
    console.log();
    console.log(chalk_1.default.dim('      > Try https://webpack.js.org/guides/code-splitting'));
    console.log(chalk_1.default.dim(`      > If it's still large, analyze your bundle by running \`npx yoshi build --analyze\``));
}
exports.printBundleSizeSuggestion = printBundleSizeSuggestion;
function printClientBuildResult(webpackStats, cwd = process.cwd()) {
    printStatsResult(prepareAssets(webpackStats, cwd), 'cyan');
}
exports.printClientBuildResult = printClientBuildResult;
function printServerBuildResult(webpackStats, cwd = process.cwd()) {
    printStatsResult(prepareAssets(webpackStats, cwd), 'yellow');
}
exports.printServerBuildResult = printServerBuildResult;
function printBuildResult({ webpackStats, cwd = process.cwd(), }) {
    const [clientStats, serverStats] = webpackStats;
    printClientBuildResult(clientStats, cwd);
    printServerBuildResult(serverStats, cwd);
}
exports.printBuildResult = printBuildResult;
function prepareAssets(optimizedStats, cwd = process.cwd()) {
    const assetsDir = optimizedStats.compilation.outputOptions.path;
    return optimizedStats
        .toJson({ all: false, assets: true })
        .assets.filter(asset => !asset.name.endsWith('.map'))
        .map(asset => {
        const fileContents = fs_extra_1.default.readFileSync(path_1.default.join(assetsDir, asset.name));
        return {
            folder: path_1.default.join(path_1.default.relative(cwd, assetsDir), path_1.default.dirname(asset.name)),
            name: path_1.default.basename(asset.name),
            gzipSize: gzip_size_1.sync(fileContents),
            size: asset.size,
        };
    })
        .sort((a, b) => b.gzipSize - a.gzipSize);
}
function printStatsResult(assets, assetNameColor) {
    return assets.forEach(asset => {
        console.log('  ' +
            filesize_1.default(asset.size) +
            '  ' +
            `(${filesize_1.default(asset.gzipSize)} GZIP)` +
            '  ' +
            // @ts-ignore
            `${chalk_1.default.dim(asset.folder + path_1.default.sep)}${chalk_1.default[assetNameColor](asset.name)}`);
    });
}
//# sourceMappingURL=print-build-results.js.map