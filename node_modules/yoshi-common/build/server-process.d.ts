/// <reference types="node" />
import child_process from 'child_process';
import SocketServer from './socket-server';
declare type ServerProcessEnv = {
    NODE_ENV: 'development' | 'production';
    HMR_PORT?: string;
};
export declare class ServerProcess {
    private cwd;
    private serverFilePath;
    private env;
    port: number;
    child?: child_process.ChildProcess;
    private useAppName?;
    appName: string;
    private inspectArg?;
    constructor({ cwd, serverFilePath, env, port, useAppName, appName, inspectArg, }: {
        cwd?: string;
        serverFilePath: string;
        env: ServerProcessEnv;
        port: number;
        useAppName?: boolean;
        appName: string;
        inspectArg?: string;
    });
    initialize(): Promise<void>;
    close(): Promise<void>;
    restart(): Promise<void>;
}
export declare class ServerProcessWithHMR extends ServerProcess {
    socketServer: SocketServer;
    private resolve?;
    suricate: boolean;
    constructor({ cwd, serverFilePath, socketServer, suricate, appName, port, inspectArg, }: {
        cwd: string;
        serverFilePath: string;
        socketServer: SocketServer;
        suricate: boolean;
        appName: string;
        port: number;
        inspectArg?: string;
    });
    initialize(): Promise<void>;
    onMessage(response: any): void;
    send(message: any): Promise<unknown>;
    static create({ cwd, serverFilePath, appName, suricate, port, inspectArg, }: {
        cwd?: string;
        serverFilePath: string;
        appName: string;
        suricate: boolean;
        port: number;
        inspectArg?: string;
    }): Promise<ServerProcessWithHMR>;
}
export {};
//# sourceMappingURL=server-process.d.ts.map