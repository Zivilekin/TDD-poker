"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const http_1 = __importDefault(require("http"));
const detect_port_1 = __importDefault(require("detect-port"));
const sockjs_1 = __importDefault(require("sockjs"));
class SocketServer extends events_1.default {
    constructor({ hmrPort }) {
        super();
        this.connections = [];
        this.hmrPort = hmrPort;
        this.server = http_1.default.createServer();
        this.socket = sockjs_1.default.createServer({
            // Limit useless logs
            log(severity, line) {
                if (severity === 'error') {
                    console.error(line);
                }
            },
        });
        this.socket.installHandlers(this.server, { prefix: '/_yoshi_server_hmr_' });
        this.socket.on('connection', connection => {
            this.connections.push(connection);
            connection.on('data', message => {
                this.emit('message', JSON.parse(message));
            });
            connection.on('close', () => {
                const index = this.connections.indexOf(connection);
                if (index >= 0) {
                    this.connections.splice(index, 1);
                }
            });
        });
    }
    send(message) {
        this.connections.forEach(connection => {
            connection.write(JSON.stringify(message));
        });
    }
    async initialize() {
        if (!this.server.listening) {
            await new Promise(resolve => this.server.listen(this.hmrPort, resolve));
        }
    }
    static async create() {
        const hmrPort = await detect_port_1.default(0);
        return new SocketServer({ hmrPort });
    }
}
exports.default = SocketServer;
//# sourceMappingURL=socket-server.js.map