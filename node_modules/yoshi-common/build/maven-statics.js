"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const xmldoc_1 = __importDefault(require("xmldoc"));
const paths_1 = require("yoshi-config/build/paths");
const renderTemplate = (filename, data) => {
    const template = fs_extra_1.default.readFileSync(filename).toString();
    return Object.keys(data).reduce((acc, key) => acc.replace(`{{${key}}}`, data[key]), template);
};
module.exports = async function async({ clientProjectName, staticsDir, cwd = process.cwd(), }) {
    let templateFilename;
    let templateData;
    if (clientProjectName) {
        templateFilename = path_1.default.resolve(__dirname, './templates/nbuild.tar.gz.xml');
        templateData = { 'client-project': clientProjectName };
    }
    else {
        templateFilename = path_1.default.resolve(__dirname, './templates/tar.gz.xml');
        templateData = { staticsDir };
    }
    const template = renderTemplate(templateFilename, templateData);
    try {
        const pom = await fs_extra_1.default.readFile(path_1.default.join(cwd, paths_1.POM_FILE), 'utf-8');
        const tarGZLocation = new xmldoc_1.default.XmlDocument(pom).valueWithPath('build.plugins.plugin.configuration.descriptors.descriptor');
        await fs_extra_1.default.outputFile(path_1.default.join(cwd, tarGZLocation), template);
    }
    catch (error) { }
};
//# sourceMappingURL=maven-statics.js.map