"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const paths_1 = require("yoshi-config/build/paths");
function default_1({ packageName, cwd, }) {
    // Lookbehind assertions are supported in node v9.x.x and above.
    // By putting the regex inside the preprocessor, this isn't going to throw
    // errors for those that use Node v8.x.x.
    const scriptRegex = /(?<=<script>)((.|\n|\r)*)(?=<\/script>)/;
    return {
        markup: ({ content, filename }) => {
            const scriptContent = scriptRegex.exec(content);
            const relativePath = path_1.default.relative(path_1.default.join(cwd, paths_1.SRC_DIR), filename);
            const injectedCode = /* js */ `

      const modulesContext = require('svelte').getContext('__modules__')

      if (modulesContext) {
        modulesContext(module, '${packageName}', '${relativePath}')
      }

    `;
            // Source has a <script> tag
            if (scriptContent) {
                return {
                    code: content.replace(scriptRegex, `${injectedCode} $1`),
                };
            }
            // Source doesn't have a <script> tag
            return {
                code: `<script>${injectedCode}</script>\n\n${content}`,
            };
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=svelte-server-side-preprocess.js.map