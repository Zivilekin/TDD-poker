#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
process.on('unhandledRejection', error => {
    throw error;
});
const arg_1 = __importDefault(require("arg"));
const loadConfig_1 = __importDefault(require("yoshi-config/loadConfig"));
const normalize_debugging_args_1 = __importDefault(require("yoshi-common/build/normalize-debugging-args"));
const verify_dependencies_1 = __importDefault(require("yoshi-common/build/verify-dependencies"));
const verify_node_version_1 = __importDefault(require("yoshi-common/build/verify-node-version"));
const load_package_graph_1 = __importDefault(require("../load-package-graph"));
const verify_typescript_references_1 = __importDefault(require("../verify-typescript-references"));
const defaultCommand = 'start';
const commands = {
    build: () => Promise.resolve().then(() => __importStar(require('../scripts/build'))),
    start: () => Promise.resolve().then(() => __importStar(require('../scripts/start'))),
    test: () => Promise.resolve().then(() => __importStar(require('yoshi-flow-legacy/bin/yoshi-legacy'))),
    lint: () => Promise.resolve().then(() => __importStar(require('yoshi-flow-legacy/bin/yoshi-legacy'))),
    info: () => Promise.resolve().then(() => __importStar(require('yoshi-flow-legacy/bin/yoshi-legacy'))),
};
const args = arg_1.default({
    // Types
    '--version': Boolean,
    '--help': Boolean,
    '--verbose': Boolean,
    // Aliases
    '-v': '--version',
    '-h': '--help',
}, {
    permissive: true,
});
const foundCommand = Boolean(commands[args._[0]]);
if (!foundCommand && args['--help']) {
    console.log(`
    Usage
      $ yoshi-monorepo <command>

      Available commands
      ${Object.keys(commands).join(', ')}

      Options
      --version, -v   Version number
      --inspect       Enable the Node.js inspector
      --help, -h      Displays this message

      For more information run a command with the --help flag
      $ yoshi-monorepo build --help
  `);
    process.exit(0);
}
const command = foundCommand ? args._[0] : defaultCommand;
const forwardedArgs = foundCommand ? args._.slice(1) : args._;
if (args['--help']) {
    forwardedArgs.push('--help');
}
Promise.resolve().then(async () => {
    verify_node_version_1.default();
    await verify_dependencies_1.default();
    if (command === 'start') {
        process.env.NODE_ENV = 'development';
        process.env.BABEL_ENV = 'development';
        normalize_debugging_args_1.default();
    }
    if (command === 'build') {
        process.env.NODE_ENV = 'production';
        process.env.BABEL_ENV = 'production';
    }
    const rootConfig = loadConfig_1.default();
    const graphResult = await load_package_graph_1.default();
    await verify_typescript_references_1.default(graphResult);
    const runCommand = (await commands[command]()).default;
    // legacy flow commands doen't need to be run
    if (typeof runCommand === 'function') {
        await runCommand(forwardedArgs, rootConfig, graphResult);
    }
});
//# sourceMappingURL=yoshi-monorepo.js.map