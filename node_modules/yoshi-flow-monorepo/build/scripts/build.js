"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const arg_1 = __importDefault(require("arg"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const print_build_results_1 = require("yoshi-common/build/print-build-results");
const webpack_manager_1 = __importDefault(require("yoshi-common/build/webpack-manager"));
const paths_1 = require("yoshi-config/build/paths");
const queries_1 = require("yoshi-helpers/build/queries");
const copy_assets_1 = require("yoshi-common/build/copy-assets");
const utils_1 = require("yoshi-helpers/build/utils");
const webpack_config_1 = require("../webpack.config");
const build_1 = __importDefault(require("../build"));
const utils_2 = require("../utils");
const inTeamCity = queries_1.inTeamCity();
const build = async function (argv, rootConfig, { apps, libs }) {
    const args = arg_1.default({
        // Types
        '--help': Boolean,
        '--analyze': Boolean,
        '--stats': Boolean,
        '--source-map': Boolean,
        // Aliases
        '-h': '--help',
    }, { argv });
    const { '--help': help, '--analyze': isAnalyze, '--stats': forceEmitStats, '--source-map': forceEmitSourceMaps, } = args;
    if (help) {
        console.log(`
      Description
        Compiles the application for production deployment

      Usage
        $ yoshi-monorepo build [app-name ...]

      Options
        --help, -h      Displays this message
        --analyze       Run webpack-bundle-analyzer
        --stats         Emit webpack's stats file on "target/webpack-stats.json"
        --source-map    Emit bundle source maps
    `);
        process.exit(0);
    }
    const appNames = args._;
    if (appNames.length) {
        appNames.forEach(appName => {
            const pkg = apps.find(pkg => utils_1.stripOrganization(pkg.name) === appName);
            if (!pkg) {
                console.log(`Could not find an app with the name of ${chalk_1.default.cyan(appName)}!\n`);
                console.log('Apps found:');
                console.log(`  ${apps
                    .map(({ name }) => name)
                    .map(utils_1.stripOrganization)
                    .map(name => chalk_1.default.cyanBright(name))
                    .join(', ')}`);
                console.log();
                console.log(chalk_1.default.red('Aborting...'));
                return process.exit(1);
            }
        });
        apps = apps.filter(app => appNames.includes(utils_1.stripOrganization(app.name)));
    }
    await build_1.default([...libs, ...apps]);
    await Promise.all(apps.reduce((acc, app) => {
        return [
            ...acc,
            fs_extra_1.default.emptyDir(path_1.default.join(app.location, paths_1.STATICS_DIR)),
            fs_extra_1.default.emptyDir(path_1.default.join(app.location, paths_1.TARGET_DIR)),
            fs_extra_1.default.emptyDir(path_1.default.join(app.location, paths_1.SERVER_CHUNKS_BUILD_DIR)),
            fs_extra_1.default.unlink(path_1.default.join(app.location, paths_1.SERVER_BUNDLE)).catch(() => { }),
        ];
    }, []));
    await Promise.all(apps.map(app => copy_assets_1.copyTemplates(app.location)));
    if (inTeamCity) {
        const petriSpecs = await Promise.resolve().then(() => __importStar(require('yoshi-common/build/sync-petri-specs')));
        const wixMavenStatics = await Promise.resolve().then(() => __importStar(require('yoshi-common/build/maven-statics')));
        const copyDocker = await Promise.resolve().then(() => __importStar(require('yoshi-common/build/copy-docker')));
        // Run petri-specs once in the root of the monorepo
        await petriSpecs.default();
        await Promise.all(apps.reduce((acc, app) => {
            return [
                ...acc,
                wixMavenStatics.default({
                    clientProjectName: app.config.clientProjectName,
                    staticsDir: app.config.clientFilesPath,
                    cwd: app.location,
                }),
                copyDocker.default(app.config, app.location),
            ];
        }, []));
    }
    const webpackManager = new webpack_manager_1.default();
    // If there are more than 2 applications, the screen size
    // is just not big enough for the fancy progress bar
    // so we configure it to not be showed
    if (apps.length > 2) {
        process.env.PROGRESS_BAR = 'false';
    }
    apps.forEach(pkg => {
        let clientDebugConfig;
        let clientOptimizedConfig;
        if (utils_2.isSiteAssetsModule(pkg)) {
            // for running in the server
            clientDebugConfig = webpack_config_1.createSiteAssetsWebpackConfig(rootConfig, pkg, libs, apps, {
                isDev: false,
                target: 'node',
                isAnalyze,
                forceEmitSourceMaps,
                forceEmitStats,
            });
            // for running in the browser
            clientOptimizedConfig = webpack_config_1.createSiteAssetsWebpackConfig(rootConfig, pkg, libs, apps, {
                isDev: false,
                target: 'web',
                isAnalyze,
                forceEmitSourceMaps,
                forceEmitStats,
                transpileCarmiOutput: true,
            });
        }
        else {
            clientDebugConfig = webpack_config_1.createClientWebpackConfig(rootConfig, pkg, libs, apps, {
                isDev: true,
                forceEmitSourceMaps,
            });
            clientOptimizedConfig = webpack_config_1.createClientWebpackConfig(rootConfig, pkg, libs, apps, {
                isAnalyze,
                forceEmitSourceMaps,
                forceEmitStats,
            });
        }
        const serverConfig = webpack_config_1.createServerWebpackConfig(rootConfig, pkg, libs, apps, {
            isDev: true,
        });
        let webWorkerConfig;
        let webWorkerOptimizeConfig;
        if (pkg.config.webWorkerEntry) {
            webWorkerConfig = webpack_config_1.createWebWorkerWebpackConfig(rootConfig, pkg, libs, apps, {
                isDev: true,
            });
            webWorkerOptimizeConfig = webpack_config_1.createWebWorkerWebpackConfig(rootConfig, pkg, libs, apps, {
                isAnalyze,
                forceEmitStats,
            });
        }
        let webWorkerServerConfig;
        if (pkg.config.webWorkerServerEntry) {
            webWorkerServerConfig = webpack_config_1.createWebWorkerServerWebpackConfig(rootConfig, pkg, libs, apps, {
                isDev: true,
            });
        }
        webpackManager.addConfigs(pkg.name, [
            clientDebugConfig,
            clientOptimizedConfig,
            serverConfig,
            webWorkerConfig,
            webWorkerOptimizeConfig,
            webWorkerServerConfig,
        ]);
    });
    const { getAppData } = await webpackManager.run();
    apps.forEach(pkg => {
        console.log(chalk_1.default.bold.underline(pkg.name));
        console.log();
        if (utils_2.isSiteAssetsModule(pkg)) {
            const [siteAssetsNodeStats, siteAssetsBrowserStats] = getAppData(pkg.name).stats;
            console.log(chalk_1.default.underline('Site Assets (web)'));
            print_build_results_1.printClientBuildResult(siteAssetsBrowserStats);
            console.log();
            console.log(chalk_1.default.underline('Site Assets (node)'));
            print_build_results_1.printServerBuildResult(siteAssetsNodeStats);
        }
        else {
            const [, clientOptimizedStats, serverStats] = getAppData(pkg.name).stats;
            print_build_results_1.printBuildResult({
                webpackStats: [clientOptimizedStats, serverStats],
                cwd: pkg.location,
            });
        }
        console.log();
    });
    print_build_results_1.printBundleSizeSuggestion();
};
exports.default = build;
//# sourceMappingURL=build.js.map