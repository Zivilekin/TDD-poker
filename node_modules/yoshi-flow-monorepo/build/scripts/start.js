"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const arg_1 = __importDefault(require("arg"));
const chalk_1 = __importDefault(require("chalk"));
const dev_environment_1 = __importDefault(require("yoshi-common/build/dev-environment"));
const server_start_file_1 = require("yoshi-helpers/build/server-start-file");
const utils_1 = require("yoshi-helpers/build/utils");
const webpack_config_1 = require("../webpack.config");
const utils_2 = require("../utils");
const start = async function (argv, rootConfig, { apps, libs }) {
    const args = arg_1.default({
        // Types
        '--help': Boolean,
        '--server': String,
        '--url': String,
        '--production': Boolean,
        '--debug': Boolean,
        '--debug-brk': Boolean,
        // Aliases
        '--entry-point': '--server',
        '-e': '--server',
    }, { argv });
    if (args['--help']) {
        console.log(`
      Description
        Starts the application in development mode

      Usage
        $ yoshi-monorepo start

      Options
        --help, -h      Displays this message
        --server        (Deprecated!) The main file to start your server
        --url           Opens the browser with the supplied URL
        --production    Start using unminified production build
        --debug         Allow app-server debugging
        --debug-brk     Allow app-server debugging, process won't start until debugger will be attached
    `);
        process.exit(0);
    }
    const [appName] = args._;
    if (!appName) {
        console.log(chalk_1.default.red(`Please choose which app to start by running \`npx yoshi start <appName>\``));
        console.log();
        console.log(chalk_1.default.red('Aborting'));
        return process.exit(1);
    }
    const pkg = apps.find(pkg => pkg.name === appName);
    if (!pkg) {
        console.log(`Could not find an app with the name of ${chalk_1.default.cyan(appName)}!\n`);
        console.log('Apps found:');
        console.log(`  ${apps
            .map(({ name }) => name)
            .map(utils_1.stripOrganization)
            .map(name => chalk_1.default.cyanBright(name))
            .join(', ')}`);
        console.log();
        console.log(chalk_1.default.red('Aborting...'));
        return process.exit(1);
    }
    const { '--server': serverStartFileCLI, '--url': url, } = args;
    let serverStartFile;
    try {
        serverStartFile = server_start_file_1.getServerStartFile({ serverStartFileCLI });
    }
    catch (e) {
        console.error(e.message);
        process.exit(1);
    }
    let clientConfig;
    let siteAssetConfigNode;
    let siteAssetConfigWeb;
    if (utils_2.isSiteAssetsModule(pkg)) {
        siteAssetConfigNode = webpack_config_1.createSiteAssetsWebpackConfig(rootConfig, pkg, libs, apps, {
            isDev: true,
            target: 'node',
        });
        siteAssetConfigWeb = webpack_config_1.createSiteAssetsWebpackConfig(rootConfig, pkg, libs, apps, {
            isDev: true,
            target: 'web',
        });
    }
    else {
        clientConfig = webpack_config_1.createClientWebpackConfig(rootConfig, pkg, libs, apps, {
            isDev: true,
            isHot: pkg.config.hmr,
            suricate: pkg.config.suricate,
        });
    }
    const serverConfig = webpack_config_1.createServerWebpackConfig(rootConfig, pkg, libs, apps, {
        isDev: true,
        isHot: true,
    });
    let webWorkerConfig;
    if (pkg.config.webWorkerEntry) {
        webWorkerConfig = webpack_config_1.createWebWorkerWebpackConfig(rootConfig, pkg, libs, apps, {
            isDev: true,
            isHot: true,
        });
    }
    let webWorkerServerConfig;
    if (pkg.config.webWorkerServerEntry) {
        webWorkerServerConfig = webpack_config_1.createWebWorkerServerWebpackConfig(rootConfig, pkg, libs, apps, {
            isDev: true,
        });
    }
    const devEnvironment = await dev_environment_1.default.create({
        webpackConfigs: [
            clientConfig,
            serverConfig,
            webWorkerConfig,
            webWorkerServerConfig,
            siteAssetConfigNode,
            siteAssetConfigWeb,
        ],
        https: pkg.config.servers.cdn.ssl,
        webpackDevServerPort: pkg.config.servers.cdn.port,
        appServerPort: pkg.config.servers.app.port,
        serverFilePath: serverStartFile,
        appName: pkg.config.name,
        suricate: pkg.config.suricate,
        enableClientHotUpdates: Boolean(pkg.config.hmr),
        startUrl: url || pkg.config.startUrl,
        cwd: pkg.location,
        createEjsTemplates: pkg.config.experimentalBuildHtml,
    });
    await devEnvironment.start();
};
exports.default = start;
//# sourceMappingURL=start.js.map