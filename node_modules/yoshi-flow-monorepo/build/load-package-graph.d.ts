import { Result } from 'npm-package-arg';
import { Config } from 'yoshi-config/build/config';
export declare type Package = {
    name: string;
    version: string;
    get: (key: string) => any;
    location: string;
    private: boolean;
    resolved: Result;
    rootPath: string;
    bin: Record<string, string>;
    scripts: Record<string, string>;
    manifestLocation: string;
    nodeModulesLocation: string;
    binLocation: string;
    dependencies: Record<string, string>;
    devDependencies: Record<string, string>;
    optionalDependencies: Record<string, string>;
    peerDependencies: Record<string, string>;
};
export declare type PackageGraphNode = {
    name: string;
    location: string;
    version: string;
    externalDependencies: Map<string, Result>;
    localDependencies: Map<string, Result>;
    localDependents: Map<string, Result>;
    pkg: Package;
    config: Config;
};
export declare type PackageGraph = Map<string, PackageGraphNode>;
export declare type LoadGraphResult = {
    graph: PackageGraph;
    apps: Array<PackageGraphNode>;
    libs: Array<PackageGraphNode>;
};
export default function loadPackageGraph(monorepoRoot?: string): Promise<LoadGraphResult>;
//# sourceMappingURL=load-package-graph.d.ts.map