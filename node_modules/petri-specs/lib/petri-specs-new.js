const path = require('path');
const shell = require('shelljs');
const inquirer = require('inquirer');
const ConfigStore = require('configstore');
const packageName = require('../package').name;
const writeFile = require('./utils/file-write-logger');
const cosmiconfig = require('cosmiconfig');
const PetriConfiguration = require('./utils/PetriConfiguration');

const explorer = cosmiconfig('petri');
const conf = new ConfigStore(packageName);
const STORAGE_SETTINGS_KEY = 'new_spec_defaults';
const CUSTOM_SCOPE_VALUE = 'superUniqueCustomValue';

const { config } = explorer.searchSync() || {};

const configuration = new PetriConfiguration(config);
const hasConfiguration = configuration.hasConfiguration();
const hasConfiguredScopes = configuration.hasConfiguredScopes();
const defaultScopes = configuration.getDefaultScopes();
const configuredScopes = configuration.getScopes();
const defaultOwner = configuration.getDefaultOwner();

function getGitConfigValue(cmd) {
  let result = null;
  if (shell.which('git')) {
    result = shell
      .exec('git config --get ' + cmd, {
        silent: true,
      })
      .stdout.trim();
  }
  return result;
}

function createScopeChoices() {
  return hasConfiguredScopes
    ? {
        when: hasConfiguration,
        type: 'checkbox',
        name: 'scope',
        message: 'Choose Scope Name',
        choices: [
          ...defaultScopes.map(scope => {
            return { ...scope, disabled: 'Added by default' };
          }),
          ...configuredScopes,
          {
            name: 'Custom',
            value: CUSTOM_SCOPE_VALUE,
          },
        ],
      }
    : {
        when: false,
        type: 'input',
        name: 'dummy',
        message: 'dummy',
      };
}

function removeDuplicates(array = []) {
  return [...new Set(array)];
}

function getScopes(answers) {
  let scopes = [];
  let customScopes = [];

  if (Array.isArray(answers.scope)) {
    scopes = answers.scope.filter(value => value !== CUSTOM_SCOPE_VALUE);
  }

  if (typeof answers.customscope === 'string') {
    customScopes = answers.customscope
      .split(',')
      .map(scopeName => scopeName.trim());
  }

  return removeDuplicates([
    ...defaultScopes.map(defaultScope => defaultScope.value),
    ...scopes,
    ...customScopes,
  ]);
}

const promptsDefaults = conf.get(STORAGE_SETTINGS_KEY) || {
  owner: getGitConfigValue('user.email') || 'john.doe@wix.com',
  scope: 'my-account',
  onlyForLoggedInUsers: true,
};

const promptForSpecName = {
  type: 'input',
  name: 'spec',
  message: 'Spec Name',
  validate: value => {
    if (!value.match(/^specs(\.[a-z][a-zA-Z0-9-_]*)?\.[A-Z][a-zA-Z0-9-_]*$/)) {
      return 'Must match pattern specs.myNamespace.MySpecName';
    } else {
      return true;
    }
  },
};
const promptForScopeName = createScopeChoices();

const promptForScopeNameCustom = {
  when: answers => {
    return (
      !answers.scope ||
      (answers.scope.length && answers.scope.includes(CUSTOM_SCOPE_VALUE))
    );
  },
  type: 'input',
  name: 'customscope',
  message: hasConfiguredScopes
    ? "Custom Scope Names (seperated by ',')"
    : "Scope Names (seperated by ',')",
  default: promptsDefaults.scope,
};

const promptForEmail = {
  input: 'input',
  name: 'owner',
  message: 'Owner email',
  default: defaultOwner || promptsDefaults.owner,
};

const promptForScopeType = {
  type: 'list',
  name: 'onlyForLoggedInUsers',
  message: 'Scope Type',
  choices: [
    {
      name: 'Only for logged in users',
      value: true,
    },
    {
      name: 'All user types',
      value: false,
    },
  ],
  default: promptsDefaults.onlyForLoggedInUsers ? 0 : 1,
};

module.exports = function(options) {
  inquirer
    .prompt([
      promptForSpecName,
      promptForScopeName,
      promptForScopeNameCustom,
      promptForEmail,
      promptForScopeType,
    ])
    .then(answers => {
      const spec = answers.spec;
      delete answers.spec;

      answers.scopes = getScopes(answers);

      delete answers.customscope;
      delete answers.scope;
      const output = {
        [spec]: Object.assign(answers, {
          controlGroup: 'false',
          variants: ['true'],
        }),
      };
      const specFile = path.join(options.directory, spec + '.json');

      writeFile(specFile, JSON.stringify(output, null, 2));
      if (shell.which('git')) {
        shell.exec('git add ' + specFile, {
          silent: true,
        });
      }
      conf.set(STORAGE_SETTINGS_KEY, answers);
    })
    .catch(e => console.error(e));
};
