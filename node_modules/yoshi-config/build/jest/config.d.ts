import { LaunchOptions } from 'puppeteer';
import { InitialOptions } from '@jest/types/build/Config';
declare type BootstrapSetupOptions = {
    globalObject: any;
    getPort: () => number;
    staticsUrl: string;
    appConfDir: string;
    appLogDir: string;
    appPersistentDir: string;
};
declare type BootstrapTeardownOptions = {
    globalObject: any;
};
declare type BootstrapOptions = {
    setup?: (options: BootstrapSetupOptions) => Promise<any>;
    teardown?: (options: BootstrapTeardownOptions) => Promise<any>;
};
declare type WhitelistedSpecOptions = Pick<InitialOptions, 'globals' | 'testURL' | 'moduleNameMapper' | 'resetMocks'>;
declare type WhitelistedE2EOptions = Pick<InitialOptions, 'globals' | 'moduleNameMapper'>;
declare type WhitelistedGlobalOptions = Pick<InitialOptions, 'collectCoverage' | 'collectCoverageFrom' | 'coverageReporters' | 'coverageDirectory' | 'coveragePathIgnorePatterns' | 'coverageThreshold'>;
export declare type Config = Partial<WhitelistedGlobalOptions> & {
    puppeteer?: LaunchOptions;
    bootstrap?: BootstrapOptions;
    server?: {
        command: string;
        port: number;
    };
    specOptions?: WhitelistedSpecOptions;
    e2eOptions?: WhitelistedE2EOptions;
};
export {};
//# sourceMappingURL=config.d.ts.map