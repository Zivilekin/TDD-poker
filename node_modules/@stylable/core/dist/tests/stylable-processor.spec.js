"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var path_1 = require("../src/path");
var stylable_processor_1 = require("../src/stylable-processor");
var flat_match_1 = require("./matchers/flat-match");
var generate_test_util_1 = require("./utils/generate-test-util");
var expect = chai.expect;
chai.use(flat_match_1.flatMatch);
describe('Stylable postcss process', function () {
    it('report if missing filename', function () {
        var _a = generate_test_util_1.processSource(""), diagnostics = _a.diagnostics, namespace = _a.namespace;
        expect(namespace).to.equal('s0');
        expect(diagnostics.reports[0]).to.include({
            type: 'error',
            message: 'missing source filename'
        });
    });
    it('report on invalid namespace', function () {
        var diagnostics = generate_test_util_1.processSource("@namespace App;", { from: '/path/to/source' }).diagnostics;
        expect(diagnostics.reports[0]).to.include({
            type: 'error',
            message: stylable_processor_1.processorWarnings.INVALID_NAMESPACE_DEF()
        });
    });
    it('warn on empty-ish namespace', function () {
        var diagnostics = generate_test_util_1.processSource("@namespace '   ';", { from: '/path/to/source' }).diagnostics;
        expect(diagnostics.reports[0]).to.include({
            type: 'error',
            message: stylable_processor_1.processorWarnings.EMPTY_NAMESPACE_DEF()
        });
    });
    it('collect namespace', function () {
        var from = path_1.resolve('/path/to/style.css');
        var result = generate_test_util_1.processSource("\n            @namespace \"name\";\n            @namespace 'anther-name';\n        ", { from: from });
        expect(result.namespace).to.equal(stylable_processor_1.processNamespace('anther-name', from));
    });
    it('resolve namespace hook', function () {
        var from = path_1.resolve('/path/to/style.css');
        var result = generate_test_util_1.processSource("\n            @namespace \"name\";\n        ", { from: from }, function (s) { return 'Test-' + s; });
        expect(result.namespace).to.equal('Test-name');
    });
    it('use filename as default namespace prefix', function () {
        var from = path_1.resolve('/path/to/style.st.css');
        var distFrom = path_1.resolve('/dist/path/to/style.st.css');
        var result = generate_test_util_1.processSource("\n            /* st-namespace-reference=\"../../../path/to/style.st.css\" */\n\n        ", { from: distFrom });
        // assure namesapce generated with st-namespace-reference
        // is identical between source and dist with the relative correction
        expect(result.namespace).to.eql(stylable_processor_1.processNamespace('style', from));
    });
    it('use filename as default namespace prefix', function () {
        var from = path_1.resolve('/path/to/style.css');
        var result = generate_test_util_1.processSource("\n\n        ", { from: from });
        expect(result.namespace).to.eql(stylable_processor_1.processNamespace('style', from));
    });
    it('collect :import', function () {
        var result = generate_test_util_1.processSource("\n            :import {\n                -st-from: \"./some/path\";\n            }\n            :import {\n                -st-from: \"./some/other/path\";\n                -st-named: a,b as c;\n            }\n            :import {\n                -st-from: \"../some/global/path\";\n                -st-default: name;\n            }\n        ", { from: 'path/to/style.css' });
        expect(result.imports.length).to.eql(3);
        expect(result.mappedSymbols.a).to.include({
            _kind: 'import',
            type: 'named'
        });
        expect(result.mappedSymbols.c).to.include({
            _kind: 'import',
            type: 'named'
        });
        expect(result.mappedSymbols.name).to.include({
            _kind: 'import',
            type: 'default'
        });
        expect(result.mappedSymbols.a.import).to.deep.include({
            // from: '/path/to/some/other/path',
            fromRelative: './some/other/path',
            defaultExport: '',
            named: { a: 'a', c: 'b' }
        });
        expect(result.mappedSymbols.c.import).to.deep.include({
            // from: '/path/to/some/other/path',
            fromRelative: './some/other/path',
            defaultExport: '',
            named: { a: 'a', c: 'b' }
        });
        expect(result.mappedSymbols.name.import).to.deep.include({
            // from: '/path/some/global/path',
            fromRelative: '../some/global/path',
            defaultExport: 'name',
            named: {}
        });
    });
    it('collect :vars', function () {
        var result = generate_test_util_1.processSource("\n            :vars {\n                name: value;\n            }\n            :vars {\n                name: value;\n                name1: value1;\n            }\n        ", { from: 'path/to/style.css' });
        expect(result.vars.length).to.eql(3);
    });
    it('collect :vars types', function () {
        var result = generate_test_util_1.processSource("\n            :vars {\n                /*@type VALUE_INLINE*/name: inline;\n                /*@type VALUE_LINE_BEFORE*/\n                name1: line before;\n            }\n        ", { from: 'path/to/style.css' });
        expect(result.vars[0].valueType).to.eql('VALUE_INLINE');
        expect(result.vars[1].valueType).to.eql('VALUE_LINE_BEFORE');
    });
    it('resolve local :vars (dont warn if name is imported)', function () {
        // ToDo: check if test is needed
        var result = generate_test_util_1.processSource("\n            :import {\n                -st-from: \"./file.css\";\n                -st-named: name;\n            }\n            :vars {\n                myname: value(name);\n            }\n        ", { from: 'path/to/style.css' });
        expect(result.diagnostics.reports.length, 'no reports').to.eql(0);
    });
    it('collect typed classes extends', function () {
        var result = generate_test_util_1.processSource("\n            :import {\n                -st-from: './file.css';\n                -st-default: Style;\n            }\n            .myclass {\n                -st-extends: Style;\n            }\n        ", { from: 'path/to/style.css' });
        expect(result.diagnostics.reports.length, 'no reports').to.eql(0);
        expect(result.classes).to.flatMatch({
            myclass: {
                '-st-extends': {
                    _kind: 'import',
                    type: 'default',
                    import: {
                        // from: '/path/to/file.css',
                        fromRelative: './file.css',
                        defaultExport: 'Style'
                    }
                }
            }
        });
    });
    it('collect typed elements', function () {
        var result = generate_test_util_1.processSource("\n            Element {\n\n            }\n            div {\n\n            }\n        ", { from: 'path/to/style.css' });
        expect(Object.keys(result.elements).length).to.eql(1);
    });
    it('always contain root class', function () {
        var result = generate_test_util_1.processSource("\n\n        ", { from: 'path/to/style.css' });
        expect(result.classes).to.eql({
            root: {
                '_kind': 'class',
                'name': 'root',
                '-st-root': true
            }
        });
    });
    it('collect classes', function () {
        var result = generate_test_util_1.processSource("\n            .root{}\n            .classA{}\n            .classB, .classC, .classA{}\n            :not(.classD){}\n            .classE:hover{}\n        ", { from: 'path/to/style.css' });
        expect(Object.keys(result.classes).length).to.eql(6);
    });
    it('collect classes in @media', function () {
        var result = generate_test_util_1.processSource("\n            @media (max-width: 300px) {\n                .root{}\n                .classA{}\n                .classB, .classC{}\n                :not(.classD){}\n                .classE:hover{}\n            }\n        ", { from: 'path/to/style.css' });
        expect(Object.keys(result.classes).length).to.eql(6);
    });
    it('collect @keyframes', function () {
        var result = generate_test_util_1.processSource("\n            @keyframes name {\n                from{}\n                to{}\n            }\n            @keyframes anther-name {\n                from{}\n                to{}\n            }\n        ", { from: 'path/to/style.css' });
        expect(result.keyframes.length).to.eql(2);
    });
});
//# sourceMappingURL=stylable-processor.spec.js.map