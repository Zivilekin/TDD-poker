import { FileProcessor, MinimalFS } from './cached-process-file';
import { Diagnostics } from './diagnostics';
import { StylableOptimizer } from './optimizer/stylable-optimizer';
import { processNamespace, StylableMeta } from './stylable-processor';
import { StylableResolver } from './stylable-resolver';
import { Options, StylableResults, StylableTransformer, TransformHooks } from './stylable-transformer';
export interface StylableConfig {
    projectRoot: string;
    fileSystem: MinimalFS;
    requireModule?: (path: string) => any;
    delimiter?: string;
    onProcess?: (meta: StylableMeta, path: string) => StylableMeta;
    diagnostics?: Diagnostics;
    hooks?: TransformHooks;
    resolveOptions?: {
        alias: any;
        symlinks: boolean;
        [key: string]: any;
    };
    optimizer?: StylableOptimizer;
    mode?: 'production' | 'development';
    resolveNamespace?: typeof processNamespace;
}
export declare class Stylable {
    projectRoot: string;
    protected fileSystem: MinimalFS;
    protected requireModule: (path: string) => any;
    delimiter: string;
    protected onProcess?: ((meta: StylableMeta, path: string) => StylableMeta) | undefined;
    protected diagnostics: Diagnostics;
    protected hooks: TransformHooks;
    protected resolveOptions: any;
    protected optimizer?: StylableOptimizer | undefined;
    protected mode: 'production' | 'development';
    protected resolveNamespace?: typeof processNamespace | undefined;
    static create(config: StylableConfig): Stylable;
    fileProcessor: FileProcessor<StylableMeta>;
    resolver: StylableResolver;
    resolvePath: (ctx: string | undefined, path: string) => string;
    constructor(projectRoot: string, fileSystem: MinimalFS, requireModule: (path: string) => any, delimiter?: string, onProcess?: ((meta: StylableMeta, path: string) => StylableMeta) | undefined, diagnostics?: Diagnostics, hooks?: TransformHooks, resolveOptions?: any, optimizer?: StylableOptimizer | undefined, mode?: 'production' | 'development', resolveNamespace?: typeof processNamespace | undefined);
    createTransformer(options?: Partial<Options>): StylableTransformer;
    transform(meta: StylableMeta): StylableResults;
    transform(source: string, resourcePath: string): StylableResults;
    process(fullpath: string, context?: string, ignoreCache?: boolean): StylableMeta;
}
//# sourceMappingURL=stylable.d.ts.map