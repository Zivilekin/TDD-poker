"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var create_infra_structure_1 = require("./create-infra-structure");
var diagnostics_1 = require("./diagnostics");
var parser_1 = require("./parser");
var stylable_processor_1 = require("./stylable-processor");
var stylable_resolver_1 = require("./stylable-resolver");
var stylable_transformer_1 = require("./stylable-transformer");
var Stylable = /** @class */ (function () {
    function Stylable(projectRoot, fileSystem, requireModule, delimiter, onProcess, diagnostics, hooks, resolveOptions, optimizer, mode, resolveNamespace) {
        if (delimiter === void 0) { delimiter = '--'; }
        if (diagnostics === void 0) { diagnostics = new diagnostics_1.Diagnostics(); }
        if (hooks === void 0) { hooks = {}; }
        if (resolveOptions === void 0) { resolveOptions = {}; }
        if (mode === void 0) { mode = 'production'; }
        this.projectRoot = projectRoot;
        this.fileSystem = fileSystem;
        this.requireModule = requireModule;
        this.delimiter = delimiter;
        this.onProcess = onProcess;
        this.diagnostics = diagnostics;
        this.hooks = hooks;
        this.resolveOptions = resolveOptions;
        this.optimizer = optimizer;
        this.mode = mode;
        this.resolveNamespace = resolveNamespace;
        var _a = create_infra_structure_1.createInfrastructure(projectRoot, fileSystem, onProcess, resolveOptions, this.resolveNamespace), fileProcessor = _a.fileProcessor, resolvePath = _a.resolvePath;
        this.resolvePath = resolvePath;
        this.fileProcessor = fileProcessor;
        this.resolver = new stylable_resolver_1.StylableResolver(this.fileProcessor, this.requireModule);
    }
    Stylable.create = function (config) {
        return new this(config.projectRoot, config.fileSystem, function (id) {
            if (config.requireModule) {
                return config.requireModule(id);
            }
            throw new Error('Javascript files are not supported without requireModule options');
        }, config.delimiter, config.onProcess, config.diagnostics, config.hooks, config.resolveOptions, config.optimizer, config.mode, config.resolveNamespace);
    };
    Stylable.prototype.createTransformer = function (options) {
        if (options === void 0) { options = {}; }
        return new stylable_transformer_1.StylableTransformer(__assign({ delimiter: this.delimiter, diagnostics: new diagnostics_1.Diagnostics(), fileProcessor: this.fileProcessor, requireModule: this.requireModule, postProcessor: this.hooks.postProcessor, replaceValueHook: this.hooks.replaceValueHook, mode: this.mode }, options));
    };
    Stylable.prototype.transform = function (meta, resourcePath, options) {
        if (options === void 0) { options = {}; }
        if (typeof meta === 'string') {
            // TODO: refactor to use fileProcessor
            // meta = this.fileProcessor.processContent(meta, resourcePath + '');
            var root = parser_1.safeParse(meta, { from: resourcePath });
            meta = new stylable_processor_1.StylableProcessor(undefined, this.resolveNamespace).process(root);
        }
        var transformer = this.createTransformer(options);
        this.fileProcessor.add(meta.source, meta);
        return transformer.transform(meta);
    };
    Stylable.prototype.process = function (fullpath, context, ignoreCache) {
        return this.fileProcessor.process(fullpath, ignoreCache, context);
    };
    return Stylable;
}());
exports.Stylable = Stylable;
//# sourceMappingURL=stylable.js.map