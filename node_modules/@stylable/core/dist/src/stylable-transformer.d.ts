import * as postcss from 'postcss';
import { FileProcessor } from './cached-process-file';
import { Diagnostics } from './diagnostics';
import { SelectorAstNode } from './selector-utils';
import { ClassSymbol, StylableMeta, StylableSymbol } from './stylable-processor';
import { CSSResolve, StylableResolver } from './stylable-resolver';
import { Pojo } from './types';
export interface ResolvedElement {
    name: string;
    type: string;
    resolved: CSSResolve[];
}
export interface KeyFrameWithNode {
    value: string;
    node: postcss.Node;
}
export interface StylableResults {
    meta: StylableMeta;
    exports: Pojo<string>;
}
export interface ScopedSelectorResults {
    current: StylableMeta;
    symbol: StylableSymbol | null;
    selectorAst: SelectorAstNode;
    selector: string;
    elements: ResolvedElement[][];
}
export declare type replaceValueHook = (value: string, name: string | {
    name: string;
    args: string[];
}, isLocal: boolean, passedThrough: string[]) => string;
export declare type postProcessor<T = {}> = (stylableResults: StylableResults, transformer: StylableTransformer) => StylableResults & T;
export interface TransformHooks {
    postProcessor?: postProcessor;
    replaceValueHook?: replaceValueHook;
}
declare type EnvMode = 'production' | 'development';
export interface Options {
    fileProcessor: FileProcessor<StylableMeta>;
    requireModule: (modulePath: string) => any;
    diagnostics: Diagnostics;
    delimiter?: string;
    keepValues?: boolean;
    replaceValueHook?: replaceValueHook;
    postProcessor?: postProcessor;
    mode?: EnvMode;
}
export interface AdditionalSelector {
    selectorNode: SelectorAstNode;
    node: SelectorAstNode;
    customElementChunk: string;
}
export declare const transformerWarnings: {
    SYMBOL_IN_USE(name: string): string;
    UNKNOWN_PSEUDO_ELEMENT(name: string): string;
    IMPORT_ISNT_EXTENDABLE(): string;
    CANNOT_EXTEND_UNKNOWN_SYMBOL(name: string): string;
    CANNOT_EXTEND_JS(): string;
    KEYFRAME_NAME_RESERVED(name: string): string;
    UNKNOWN_IMPORT_ALIAS(name: string): string;
    SCOPE_PARAM_NOT_ROOT(name: string): string;
    SCOPE_PARAM_NOT_CSS(name: string): string;
    UNKNOWN_SCOPING_PARAM(name: string): string;
};
export declare class StylableTransformer {
    fileProcessor: FileProcessor<StylableMeta>;
    diagnostics: Diagnostics;
    resolver: StylableResolver;
    delimiter: string;
    keepValues: boolean;
    replaceValueHook: replaceValueHook | undefined;
    postProcessor: postProcessor | undefined;
    mode: EnvMode;
    constructor(options: Options);
    transform(meta: StylableMeta): StylableResults;
    transformAst(ast: postcss.Root, meta: StylableMeta, metaExports?: Pojo<string>, variableOverride?: Pojo<string>, path?: string[]): void;
    exportLocalVars(meta: StylableMeta, metaExports: Pojo<string>, variableOverride?: Pojo<string>): void;
    exportKeyframes(keyframeMapping: Pojo<KeyFrameWithNode>, metaExports: Pojo<string>): void;
    exportRootClass(meta: StylableMeta, metaExports: Pojo<string>): void;
    exportClass(meta: StylableMeta, name: string, classSymbol: ClassSymbol, metaExports?: Pojo<string>): string;
    scopeKeyframes(ast: postcss.Root, meta: StylableMeta): Pojo<KeyFrameWithNode>;
    addGlobalsToMeta(selectorAst: SelectorAstNode[], meta?: StylableMeta): void;
    transformGlobals(ast: postcss.Root, meta: StylableMeta): void;
    resolveSelectorElements(meta: StylableMeta, selector: string): ResolvedElement[][];
    scopeSelector(originMeta: StylableMeta, selector: string, metaExports?: Pojo<string>, calcPaths?: boolean, rule?: postcss.Rule): ScopedSelectorResults;
    addAdditionalSelectors(addedSelectors: AdditionalSelector[], selectorAst: SelectorAstNode): void;
    applyRootScoping(meta: StylableMeta, selectorAst: SelectorAstNode): void;
    scopeRule(meta: StylableMeta, rule: postcss.Rule, metaExports?: Pojo<string>): string;
    handleClass(meta: StylableMeta, node: SelectorAstNode, name: string, metaExports?: Pojo<string>, rule?: postcss.Rule, originMeta?: StylableMeta): CSSResolve;
    handleElement(meta: StylableMeta, node: SelectorAstNode, name: string, originMeta?: StylableMeta): CSSResolve | {
        meta: StylableMeta;
        symbol: StylableSymbol;
    };
    handlePseudoElement(meta: StylableMeta, node: SelectorAstNode, name: string, selectorNode: SelectorAstNode, addedSelectors: AdditionalSelector[], rule?: postcss.Rule, originMeta?: StylableMeta): CSSResolve;
    cssStates(stateMapping: Pojo<boolean> | null | undefined, namespace: string): {};
    scope(name: string, namespace: string, delimiter?: string): string;
    private resetTransformProperties;
}
export declare function removeSTDirective(root: postcss.Root): void;
export {};
//# sourceMappingURL=stylable-transformer.d.ts.map