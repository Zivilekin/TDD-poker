const path = require('path');
const genericNames = require('generic-names');
const {isProduction, isCI, tryRequire, isSass, replaceSassWebpackImports} = require('./utils');
const nodeSass = tryRequire('node-sass');

const patterns = module.exports.patterns = {
  long: '[path][name]__[local]__[hash:base64:5]',
  short: '[hash:base64:5]'
};
const {LONG_CSS_PATTERN, SHORT_CSS_PATTERN} = process.env;

const cssModulesPattren = module.exports.cssModulesPattren = () => {
  if (LONG_CSS_PATTERN === 'true') {
    return patterns.long;
  }

  if (SHORT_CSS_PATTERN === 'true') {
    return patterns.short;
  }

  return (isProduction() || isCI()) ? patterns.short : patterns.long;
};

module.exports.wixCssModulesRequireHook = (rootDir = './dist/src', customConfig = {}) => {
  require('css-modules-require-hook')(Object.assign({
    rootDir,
    generateScopedName: (name, filepath) => {
      let context = rootDir;
      if (filepath.indexOf('/node_modules/') > -1) {
        context = context.replace('/src', '');
      }
      const hashPrefix = require(path.resolve('package.json')).name;
      const generate = genericNames(cssModulesPattren(), {context, hashPrefix});
      return generate(name, filepath);
    },
    preprocessCss(css, fileName) {
      if (!nodeSass || !isSass(fileName)) {
        return css;
      }
      return nodeSass.renderSync({
        data: replaceSassWebpackImports(css),
        file: fileName,
      }).css;
    },
    extensions: ['.scss', '.css', '.less', '.sass'],
    camelCase: true
  }, customConfig));
};
