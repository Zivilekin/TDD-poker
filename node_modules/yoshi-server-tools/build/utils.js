"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
const path_1 = __importDefault(require("path"));
const traverse_1 = __importDefault(require("@babel/traverse"));
const paths_1 = require("yoshi-config/build/paths");
const parser_1 = require("@babel/parser");
function collectExportNames(source) {
    const exportedNames = [];
    const ast = parser_1.parse(source, { sourceType: 'module', plugins: ['typescript'] });
    traverse_1.default(ast, {
        ExportNamedDeclaration({ node }) {
            if (node.declaration) {
                if (node.declaration.type === 'VariableDeclaration') {
                    const [declaration] = node.declaration.declarations;
                    if (declaration.id.type === 'Identifier') {
                        exportedNames.push(declaration.id.name);
                    }
                }
            }
        },
    });
    return exportedNames;
}
function transform(source, fullFileName) {
    const srcDir = path_1.default.resolve(paths_1.SRC_DIR);
    const fileName = path_1.default.relative(srcDir, fullFileName).replace(/\.[^/.]+$/, '');
    const headers = [`import { dsl } from 'yoshi-server/build/wrap';`];
    const functions = collectExportNames(source).map(functionName => {
        return `export const ${functionName} = dsl({
          functionName: '${functionName}',
          fileName: '${fileName}',
        });`;
    });
    return [...headers, ...functions].join('\n\n');
}
exports.transform = transform;
//# sourceMappingURL=utils.js.map