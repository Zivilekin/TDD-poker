"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const arg_1 = __importDefault(require("arg"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const dev_environment_1 = __importDefault(require("yoshi-common/build/dev-environment"));
const paths_1 = require("yoshi-config/build/paths");
const queries_1 = require("yoshi-helpers/build/queries");
const server_start_file_1 = require("yoshi-helpers/build/server-start-file");
const webpack_config_1 = require("../webpack.config");
const join = (...dirs) => path_1.default.join(process.cwd(), ...dirs);
const start = async function (argv, config) {
    const args = arg_1.default({
        // Types
        '--help': Boolean,
        '--server': String,
        '--url': String,
        '--production': Boolean,
        '--debug': Boolean,
        '--debug-brk': Boolean,
        // Aliases
        '--entry-point': '--server',
        '-e': '--server',
    }, { argv });
    const { '--help': help, '--server': serverStartFileCLI, '--url': url, '--production': shouldRunAsProduction, } = args;
    if (help) {
        console.log(`
      Description
        Starts the application in development mode

      Usage
        $ yoshi-app start

      Options
        --help, -h      Displays this message
        --server        (Deprecated!) The main file to start your server
        --url           Opens the browser with the supplied URL
        --production    Start using unminified production build
        --debug         Allow app-server debugging
        --debug-brk     Allow app-server debugging, process won't start until debugger will be attached
    `);
        process.exit(0);
    }
    const inspectArg = process.argv.find(arg => arg.includes('--debug'));
    let serverStartFile;
    try {
        serverStartFile = server_start_file_1.getServerStartFile({ serverStartFileCLI });
    }
    catch (e) {
        console.error(e.message);
        process.exit(1);
    }
    console.log(chalk_1.default.cyan('Starting development environment...\n'));
    if (shouldRunAsProduction) {
        process.env.BABEL_ENV = 'production';
        process.env.NODE_ENV = 'production';
    }
    await Promise.all([
        fs_extra_1.default.emptyDir(join(paths_1.BUILD_DIR)),
        fs_extra_1.default.emptyDir(join(paths_1.TARGET_DIR)),
    ]);
    const clientConfig = webpack_config_1.createClientWebpackConfig(config, {
        isDev: true,
        suricate: config.suricate,
        isHot: config.hmr,
    });
    const serverConfig = webpack_config_1.createServerWebpackConfig(config, {
        isDev: true,
        isHot: true,
    });
    let webWorkerConfig;
    if (queries_1.isWebWorkerBundle) {
        webWorkerConfig = webpack_config_1.createWebWorkerWebpackConfig(config, {
            isDev: true,
            isHot: true,
        });
    }
    const devEnvironment = await dev_environment_1.default.create({
        webpackConfigs: [clientConfig, serverConfig, webWorkerConfig],
        webpackDevServerPort: config.servers.cdn.port,
        appServerPort: config.servers.app.port,
        https: config.servers.cdn.ssl,
        serverFilePath: serverStartFile,
        suricate: config.suricate,
        appName: config.name,
        startUrl: url || config.startUrl,
        enableClientHotUpdates: Boolean(config.hmr),
        createEjsTemplates: config.experimentalBuildHtml,
        storybook: config.experimentalStorybook,
        yoshiServer: config.yoshiServer,
        inspectArg,
    });
    await devEnvironment.start();
};
exports.default = start;
//# sourceMappingURL=start.js.map