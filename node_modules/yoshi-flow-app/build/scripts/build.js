"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const arg_1 = __importDefault(require("arg"));
const webpack_utils_1 = require("yoshi-common/build/webpack-utils");
const print_build_results_1 = require("yoshi-common/build/print-build-results");
const copy_assets_1 = require("yoshi-common/build/copy-assets");
const paths_1 = require("yoshi-config/build/paths");
const queries_1 = require("yoshi-helpers/build/queries");
const fs_extra_1 = __importDefault(require("fs-extra"));
const webpack_config_1 = require("../webpack.config");
const join = (...dirs) => path_1.default.join(process.cwd(), ...dirs);
const build = async function (argv, config) {
    const args = arg_1.default({
        // Types
        '--help': Boolean,
        '--analyze': Boolean,
        '--stats': Boolean,
        '--source-map': Boolean,
        // Aliases
        '-h': '--help',
    }, { argv });
    const { '--help': help, '--analyze': isAnalyze, '--stats': forceEmitStats, '--source-map': forceEmitSourceMaps, } = args;
    if (help) {
        console.log(`
      Description
        Compiles the application for production deployment

      Usage
        $ yoshi-app build

      Options
        --help, -h      Displays this message
        --analyze       Run webpack-bundle-analyzer
        --stats         Emit webpack's stats file on "target/webpack-stats.json"
        --source-map    Emit bundle source maps
    `);
        process.exit(0);
    }
    await Promise.all([
        fs_extra_1.default.emptyDir(join(paths_1.BUILD_DIR)),
        fs_extra_1.default.emptyDir(join(paths_1.TARGET_DIR)),
    ]);
    await copy_assets_1.copyTemplates();
    if (queries_1.inTeamCity()) {
        const petriSpecs = await Promise.resolve().then(() => __importStar(require('yoshi-common/build/sync-petri-specs')));
        const wixMavenStatics = await Promise.resolve().then(() => __importStar(require('yoshi-common/build/maven-statics')));
        const copyDocker = await Promise.resolve().then(() => __importStar(require('yoshi-common/build/copy-docker')));
        await Promise.all([
            petriSpecs.default({
                config: config.petriSpecsConfig,
            }),
            wixMavenStatics.default({
                clientProjectName: config.clientProjectName,
                staticsDir: config.clientFilesPath,
            }),
            copyDocker.default(config),
        ]);
    }
    const clientDebugConfig = webpack_config_1.createClientWebpackConfig(config, {
        isDev: true,
        forceEmitSourceMaps,
    });
    const clientOptimizedConfig = webpack_config_1.createClientWebpackConfig(config, {
        isAnalyze,
        forceEmitSourceMaps,
        forceEmitStats,
    });
    const serverConfig = webpack_config_1.createServerWebpackConfig(config, {
        isDev: true,
    });
    let webWorkerConfig;
    let webWorkerOptimizeConfig;
    if (queries_1.isWebWorkerBundle) {
        webWorkerConfig = webpack_config_1.createWebWorkerWebpackConfig(config, {
            isDev: true,
        });
        webWorkerOptimizeConfig = webpack_config_1.createWebWorkerWebpackConfig(config);
    }
    const { stats } = await webpack_utils_1.runWebpack([
        clientDebugConfig,
        clientOptimizedConfig,
        serverConfig,
        webWorkerConfig,
        webWorkerOptimizeConfig,
    ]);
    const [, clientOptimizedStats, serverStats] = stats;
    print_build_results_1.printBuildResult({ webpackStats: [clientOptimizedStats, serverStats] });
    print_build_results_1.printBundleSizeSuggestion();
};
exports.default = build;
//# sourceMappingURL=build.js.map