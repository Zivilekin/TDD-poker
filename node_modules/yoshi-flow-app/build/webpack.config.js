"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWebWorkerWebpackConfig = exports.createServerWebpackConfig = exports.createClientWebpackConfig = void 0;
const webpack_utils_1 = require("yoshi-common/build/webpack-utils");
const webpack_config_1 = require("yoshi-common/build/webpack.config");
const constants_1 = require("yoshi-helpers/build/constants");
const queries_1 = require("yoshi-helpers/build/queries");
const paths_1 = require("yoshi-config/build/paths");
const lodash_1 = require("lodash");
const useTypeScript = queries_1.isTypescriptProject();
const createDefaultOptions = (config) => {
    const separateCss = config.separateCss === 'prod'
        ? queries_1.inTeamCity() || queries_1.isProduction()
        : config.separateCss;
    return {
        name: config.name,
        useTypeScript,
        typeCheckTypeScript: useTypeScript,
        useAngular: config.isAngularProject,
        devServerUrl: config.servers.cdn.url,
        separateCss,
        umdNamedDefine: config.umdNamedDefine,
    };
};
const defaultSplitChunksConfig = {
    chunks: 'all',
    name: 'commons',
    minChunks: 2,
};
function createClientWebpackConfig(config, { isDev, isHot, suricate, isAnalyze, forceEmitSourceMaps, forceEmitStats, } = {}) {
    const entry = config.entry || constants_1.defaultEntry;
    const defaultOptions = createDefaultOptions(config);
    const clientConfig = webpack_config_1.createBaseWebpackConfig(Object.assign({ configName: 'client', target: 'web', isDev,
        isHot,
        isAnalyze,
        forceEmitSourceMaps,
        forceEmitStats, exportAsLibraryName: config.exports, suricate, cssModules: config.cssModules, performanceBudget: config.performanceBudget, enhancedTpaStyle: config.enhancedTpaStyle, tpaStyle: config.tpaStyle, keepFunctionNames: config.keepFunctionNames, separateStylableCss: config.enhancedTpaStyle || config.separateStylableCss, experimentalRtlCss: config.experimentalRtlCss, externalizeRelativeLodash: config.externalizeRelativeLodash, createEjsTemplates: config.experimentalBuildHtml, useYoshiServer: config.yoshiServer }, defaultOptions));
    clientConfig.entry = queries_1.isSingleEntry(entry) ? { app: entry } : entry;
    clientConfig.resolve.alias = config.resolveAlias;
    clientConfig.externals = config.externals;
    const useSplitChunks = config.splitChunks;
    if (useSplitChunks) {
        const splitChunksConfig = lodash_1.isObject(useSplitChunks)
            ? useSplitChunks
            : defaultSplitChunksConfig;
        clientConfig.optimization.splitChunks = splitChunksConfig;
    }
    return clientConfig;
}
exports.createClientWebpackConfig = createClientWebpackConfig;
function createServerWebpackConfig(config, { isDev, isHot } = {}) {
    const defaultOptions = createDefaultOptions(config);
    const serverConfig = webpack_config_1.createBaseWebpackConfig(Object.assign({ configName: 'server', target: 'node', isDev,
        isHot, useYoshiServer: config.yoshiServer, serverExternals: config.serverExternals }, defaultOptions));
    serverConfig.entry = async () => {
        const serverEntry = webpack_utils_1.validateServerEntry({
            extensions: serverConfig.resolve.extensions,
            yoshiServer: config.yoshiServer,
        });
        let entryConfig = config.yoshiServer
            ? webpack_utils_1.createServerEntries(serverConfig.context)
            : {};
        if (serverEntry) {
            entryConfig = Object.assign(Object.assign({}, entryConfig), { [paths_1.SERVER_ENTRY]: serverEntry });
        }
        return entryConfig;
    };
    return serverConfig;
}
exports.createServerWebpackConfig = createServerWebpackConfig;
function createWebWorkerWebpackConfig(config, { isDev, isHot } = {}) {
    const defaultOptions = createDefaultOptions(config);
    const workerConfig = webpack_config_1.createBaseWebpackConfig(Object.assign({ configName: 'web-worker', target: 'webworker', isDev,
        isHot }, defaultOptions));
    workerConfig.output.library = '[name]';
    workerConfig.output.libraryTarget = 'umd';
    workerConfig.output.globalObject = 'self';
    workerConfig.entry = config.webWorkerEntry;
    workerConfig.resolve.alias = config.resolveAlias;
    workerConfig.externals = config.webWorkerExternals;
    return workerConfig;
}
exports.createWebWorkerWebpackConfig = createWebWorkerWebpackConfig;
//# sourceMappingURL=webpack.config.js.map