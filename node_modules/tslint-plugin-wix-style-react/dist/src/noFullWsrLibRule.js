"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var ts = require("typescript");
var utils_1 = require("./utils");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new Walk(sourceFile, this.getOptions()));
    };
    Rule.FAILURE_STRING = "Wix-Style-React is imported in a way that does not support tree shaking. Use a direct import, for example: `import Button from 'wix-style-react/Button';`";
    Rule.LIB_NAME = 'wix-style-react';
    Rule.MAX_VERSION = '5.8.1';
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var Walk = /** @class */ (function (_super) {
    __extends(Walk, _super);
    function Walk(sourceFile, options) {
        var _this = _super.call(this, sourceFile, options) || this;
        _this.shouldIgnoreNamedImports = utils_1.isVersionGreater(Rule.LIB_NAME, Rule.MAX_VERSION);
        return _this;
    }
    Walk.prototype.visitImportDeclaration = function (node) {
        if (!this.shouldIgnoreNamedImports && this.isWSRImport(node)) {
            this.addFailureAt(node.getStart(), node.getEnd() - node.getStart(), Rule.FAILURE_STRING, this.fixSelectiveImports(node));
        }
        _super.prototype.visitImportDeclaration.call(this, node);
    };
    Walk.prototype.visitVariableStatement = function (node) {
        var _this = this;
        // iterate list since we can have more than one variable declared in a single declaration
        node.declarationList.declarations.forEach(function (variableDeclaration) {
            if (_this.isWSRRequireStatement(variableDeclaration)) {
                if (_this.isRequireAllLib(variableDeclaration)) {
                    _this.addFailureAt(variableDeclaration.getStart(), variableDeclaration.getEnd() - variableDeclaration.getStart(), Rule.FAILURE_STRING);
                }
                else if (_this.isRequireWithDestructure(variableDeclaration)) {
                    _this.addFailureAt(variableDeclaration.parent.getStart(), variableDeclaration.parent.getEnd() - variableDeclaration.parent.getStart(), Rule.FAILURE_STRING, 
                    // fix only if only one variableDeclaration in variableDeclarationList
                    node.declarationList.declarations && node.declarationList.declarations.length === 1
                        ? _this.fixSelectiveRequire(node, variableDeclaration)
                        : undefined);
                }
            }
            else if (_this.isWSRRequireWithProperty(variableDeclaration)) {
                _this.addFailureAt(variableDeclaration.parent.getStart(), variableDeclaration.parent.getEnd() - variableDeclaration.parent.getStart(), Rule.FAILURE_STRING, 
                // fix only if only one variableDeclaration in variableDeclarationList
                node.declarationList.declarations && node.declarationList.declarations.length === 1
                    ? _this.fixPropertyRequire(node, variableDeclaration)
                    : undefined);
            }
        });
        _super.prototype.visitVariableStatement.call(this, node);
    };
    // const {Button, Panel} = require('wix-style-react');
    Walk.prototype.isRequireWithDestructure = function (variableDeclaration) {
        return ts.isObjectBindingPattern(variableDeclaration.name);
    };
    // const WSR = require('wix-style-react');
    Walk.prototype.isRequireAllLib = function (variableDeclaration) {
        return ts.isIdentifier(variableDeclaration.name);
    };
    // const Button2 = require('wix-style-react').Button;
    Walk.prototype.isWSRRequireWithProperty = function (variableDeclaration) {
        return (variableDeclaration.initializer &&
            ts.isPropertyAccessExpression(variableDeclaration.initializer) &&
            ts.isCallExpression(variableDeclaration.initializer.expression) &&
            variableDeclaration.initializer.expression.expression.getText() === 'require' &&
            variableDeclaration.initializer.expression.arguments &&
            variableDeclaration.initializer.expression.arguments.length &&
            variableDeclaration.initializer.expression.arguments[0].text === Rule.LIB_NAME);
    };
    Walk.prototype.isWSRImport = function (node) {
        return (node.moduleSpecifier &&
            node.moduleSpecifier.text === Rule.LIB_NAME &&
            node.importClause &&
            node.importClause.namedBindings.elements &&
            node.importClause.namedBindings.elements.length);
    };
    Walk.prototype.isWSRRequireStatement = function (variableDeclaration) {
        return (variableDeclaration.initializer &&
            ts.isCallExpression(variableDeclaration.initializer) &&
            ts.isIdentifier(variableDeclaration.initializer.expression) &&
            variableDeclaration.initializer.expression.getText() === 'require' &&
            variableDeclaration.initializer.arguments &&
            variableDeclaration.initializer.arguments.length &&
            variableDeclaration.initializer.arguments[0].text === Rule.LIB_NAME);
    };
    Walk.prototype.fixSelectiveImports = function (node) {
        var _this = this;
        var specifiers = node.importClause.namedBindings.elements.map(function (specifier) { return specifier.name.text; });
        var importStatements = specifiers.map(function (specifier) { return _this.compileImportStatement(specifier); });
        return new Lint.Replacement(node.getStart(), node.getWidth(), importStatements.join('\n'));
    };
    Walk.prototype.fixSelectiveRequire = function (variableStatementNode, variableDeclarationNode) {
        var _this = this;
        if (ts.isObjectBindingPattern(variableDeclarationNode.name)) {
            var specifiers = variableDeclarationNode.name.elements.map(function (element) { return element.name.getText(); });
            var importStatements = specifiers.map(function (specifier) { return _this.compileImportStatement(specifier); });
            return new Lint.Replacement(variableStatementNode.getStart(), variableStatementNode.getWidth(), importStatements.join('\n'));
        }
    };
    // const Button2 = require('wix-style-react').Button;
    Walk.prototype.fixPropertyRequire = function (variableStatementNode, variableDeclarationNode) {
        if (variableDeclarationNode.initializer &&
            ts.isPropertyAccessExpression(variableDeclarationNode.initializer) &&
            ts.isIdentifier(variableDeclarationNode.initializer.name)) {
            var identifier = variableDeclarationNode.name.getText();
            var specifier = variableDeclarationNode.initializer &&
                variableDeclarationNode.initializer.name.getText();
            return new Lint.Replacement(variableStatementNode.getStart(), variableStatementNode.getWidth(), this.compileImportStatement(identifier, specifier));
        }
    };
    Walk.prototype.compileImportStatement = function (name, source) {
        if (source === void 0) { source = name; }
        return "import " + name + " from '" + Rule.LIB_NAME + "/" + source + "';";
    };
    return Walk;
}(Lint.RuleWalker));
//# sourceMappingURL=noFullWsrLibRule.js.map