"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lintRunner_1 = require("../src/lintRunner");
var rule = 'no-full-wsr-lib';
describe('no-full-wsr-lib', function () {
    it("should not fail", function () {
        var src = "import Button from 'wix-style-react/Button';";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(0);
    });
    it("should fail on a destructured import statement", function () {
        var src = "import { Button } from 'wix-style-react';";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
        var failure = lintRunner_1.helper({ src: src, rule: rule }).failures[0];
        expect(failure.getFailure()).toBe("Wix-Style-React is imported in a way that does not support tree shaking. Use a direct import, for example: `import Button from 'wix-style-react/Button';`");
    });
    it("should fail on a destructured require statement", function () {
        var src = "const { Button } = require('wix-style-react');";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
    });
    it("should fail on a property access require statement", function () {
        var src = "const Button2 = require('wix-style-react').Button;";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
    });
    it("should fail on a whole lib require statement", function () {
        var src = "const WSR = require('wix-style-react');";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
    });
    it('should fix destructured import statement', function () {
        var src = "import { Button, Panel } from 'wix-style-react';";
        var output = "import Button from 'wix-style-react/Button';\nimport Panel from 'wix-style-react/Panel';";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
        expect(lintRunner_1.getFixedResult({ src: src, rule: rule })).toEqual(output);
    });
    it('should fix destructured require statement', function () {
        var src = "const { Button } = require('wix-style-react');";
        var output = "import Button from 'wix-style-react/Button';";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
        expect(lintRunner_1.getFixedResult({ src: src, rule: rule })).toEqual(output);
    });
    it('should fix property access require statement', function () {
        var src = "const Button2 = require('wix-style-react').Button;";
        var output = "import Button2 from 'wix-style-react/Button';";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
        expect(lintRunner_1.getFixedResult({ src: src, rule: rule })).toEqual(output);
    });
    it('should not fix requiring all the lib', function () {
        var src = "const WSR = require('wix-style-react');";
        var output = "const WSR = require('wix-style-react');";
        var result = lintRunner_1.helper({ src: src, rule: rule });
        expect(result.errorCount).toBe(1);
        expect(lintRunner_1.getFixedResult({ src: src, rule: rule })).toEqual(output);
    });
    describe('regression tests', function () {
        it("should not throw an error", function () {
            /*
              for some reason errors from ts core not thrown in tests,
              they just shown as warns, so we listen to console.warn
            */
            var spy = jest.spyOn(console, 'warn');
            var src = "let variableWithoutInit;";
            lintRunner_1.helper({ src: src, rule: rule });
            expect(spy).toHaveBeenCalledTimes(0);
            spy.mockRestore();
        });
    });
});
//# sourceMappingURL=noFullWsrLibRule.spec.js.map