import { ChildProcess } from 'child_process';
import chokidar from 'chokidar';
import { Stats } from 'webpack';
export declare function logIfAny(log: any): void;
export declare const suffix: (ending: string) => (str: string) => string;
export declare const reportWebpackStats: (buildType: 'debug' | 'production', stats: Stats) => void;
export declare const writeFile: (targetFileName: string, data: string) => void;
declare type callback = (path: string) => void;
export declare const watch: ({ pattern, cwd, ignoreInitial, ...options }: {
    pattern: string | Array<string>;
    cwd: string;
    ignoreInitial?: boolean | undefined;
}, callback: callback) => chokidar.FSWatcher;
export declare const getMochaReporter: () => string;
export declare const getListOfEntries: (entry: any) => string[];
export declare const shouldTransformHMRRuntime: () => boolean;
export declare const getProcessIdOnPort: (port: number) => string;
export declare const processIsJest: (pid: number) => boolean;
export declare const getProcessOnPort: (port: number, shouldCheckTestResult?: boolean | undefined) => Promise<{
    pid: string;
    cwd: string;
} | null>;
export declare const toIdentifier: (str: string) => string;
export declare const tryRequire: (name: string) => any;
export declare const getProjectArtifactId: (cwd?: string) => string | undefined;
export declare const getProjectArtifactVersion: () => string;
export declare const getProjectCDNBasePath: (useUnversionedBaseUrl: boolean) => string;
export declare const killSpawnProcessAndHisChildren: (child: ChildProcess) => Promise<unknown>;
export declare const readJsonSilent: (jsonPath: string) => Record<string, any>;
export declare const stripOrganization: (name: string) => string;
export {};
//# sourceMappingURL=utils.d.ts.map