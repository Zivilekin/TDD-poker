"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDevelopmentEnvVars = exports.getEnvVars = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const paths_1 = require("yoshi-config/build/paths");
exports.getEnvVars = ({ port, appConfDir, appLogDir, appPersistentDir, appTmplDir = './templates', }) => {
    const PORT = Number(port) || 3000;
    const GRPC_PORT = PORT + 1;
    const MANAGEMENT_PORT = PORT + 4;
    const WNP_TEST_RPC_PORT = PORT + 2;
    const WNP_TEST_PETRI_PORT = PORT + 3;
    const WIX_BOOT_LABORATORY_URL = `http://localhost:${WNP_TEST_PETRI_PORT}`;
    return {
        PORT,
        GRPC_PORT,
        MANAGEMENT_PORT,
        WNP_TEST_RPC_PORT,
        WNP_TEST_PETRI_PORT,
        WIX_BOOT_LABORATORY_URL,
        APP_CONF_DIR: appConfDir,
        APP_LOG_DIR: appLogDir,
        APP_PERSISTENT_DIR: appPersistentDir,
        APP_TEMPL_DIR: appTmplDir,
        NEW_RELIC_LOG_LEVEL: 'warn',
    };
};
exports.getDevelopmentEnvVars = ({ port, cwd = process.cwd(), }) => {
    // Check if the project has the default directory for loading node platform
    // configs. If it exists, the project is not using the `index-dev.js` pattern and we
    // keep the defaults. Otherwise, we inject our own defaults to keep boilerplate to a minimum.
    if (fs_1.default.existsSync(path_1.join(cwd, paths_1.NODE_PLATFORM_DEFAULT_CONFIGS_DIR))) {
        return {};
    }
    const envVars = exports.getEnvVars({
        port,
        appConfDir: process.env.APP_CONF_DIR || path_1.join(cwd, 'target', 'dev', 'configs'),
        appLogDir: path_1.join(cwd, 'target', 'dev', 'logs'),
        appPersistentDir: path_1.join(cwd, 'target', 'dev', 'persistent'),
        appTmplDir: path_1.join(cwd, 'templates'),
    });
    return envVars;
};
//# sourceMappingURL=bootstrap-utils.js.map