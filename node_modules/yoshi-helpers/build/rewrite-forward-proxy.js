"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = __importDefault(require("net"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const url_1 = __importDefault(require("url"));
const http_proxy_1 = require("http-proxy");
const server_destroy_1 = __importDefault(require("server-destroy"));
async function startRewriteForwardProxy({ search, rewrite, port, }) {
    const regularProxy = http_proxy_1.createProxyServer({ ignorePath: true, secure: false });
    function getSslCertificate() {
        const customCertPath = process.env.CUSTOM_CERT_PATH;
        const customCertKeyPath = process.env.CUSTOM_CERT_KEY_PATH;
        if (customCertPath && customCertKeyPath) {
            return {
                cert: customCertPath,
                key: customCertKeyPath,
            };
        }
        return {
            key: fs_1.default.readFileSync(path_1.default.join(__dirname, '../certificates/server.key')),
            cert: fs_1.default.readFileSync(path_1.default.join(__dirname, '../certificates/server.cert')),
        };
    }
    const options = getSslCertificate();
    function proxyRequest(protocol) {
        return (req, res) => {
            let target = protocol + '://' + req.headers.host + url_1.default.parse(req.url || '').path;
            if (target.startsWith(search)) {
                target = target.replace(search, rewrite);
            }
            regularProxy.web(req, res, { target }, err => {
                if (err) {
                    res.statusCode = 500;
                    res.end();
                }
            });
        };
    }
    const httpsReverseProxyServer = https_1.default.createServer(options, proxyRequest('https'));
    // @ts-ignore
    server_destroy_1.default(httpsReverseProxyServer);
    // start an https server to proxy requests
    const httpsReverseProxyPort = await new Promise(resolve => {
        const listener = httpsReverseProxyServer.listen(0, () => {
            // @ts-ignore
            resolve(listener.address().port);
        });
    });
    const server = http_1.default.createServer(proxyRequest('http'));
    server_destroy_1.default(server);
    server.on('connect', (_, socket) => {
        // open a TCP connection to the remote host
        // @ts-ignore
        const conn = net_1.default.connect(httpsReverseProxyPort, '127.0.0.1', function () {
            // respond to the client that the connection was made
            socket.write('HTTP/1.1 200 OK\r\n\r\n');
            // create a tunnel between the two hosts
            socket.pipe(conn);
            socket.on('error', () => { });
            conn.pipe(socket);
        });
        conn.on('error', () => { });
    });
    server.listen(port);
    return async () => {
        await closePromise(server);
        await closePromise(httpsReverseProxyServer);
    };
}
exports.default = startRewriteForwardProxy;
function closePromise(closable) {
    return new Promise((resolve, reject) => {
        closable.destroy((err) => {
            if (err) {
                reject(err);
            }
            else {
                resolve();
            }
        });
    });
}
//# sourceMappingURL=rewrite-forward-proxy.js.map