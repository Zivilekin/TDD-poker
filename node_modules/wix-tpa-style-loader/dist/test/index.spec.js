'use strict';

var _sinon = _interopRequireDefault(require("sinon"));

var _chai = require("chai");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var style = require('./style.mock.js');

var webpackContextFactory = function webpackContextFactory(params) {
  return {
    query: "?" + params.query,
    context: '!sass-loader',
    async: function async() {
      return params.done;
    }
  };
};

var loaderFactory = function loaderFactory(webpackContext) {
  return require('../src/index').bind(webpackContext);
};

describe('Wix TPA style loader', function () {
  describe('handle error', function () {
    var doneSpy;
    beforeEach(function (done) {
      doneSpy = _sinon["default"].spy(function () {
        return done();
      });
      var webpackContext = webpackContextFactory({
        done: doneSpy
      });
      loaderFactory(webpackContext)(style.bad);
    });
    it('should call to error on malformed css', function () {
      _sinon["default"].assert.calledOnce(doneSpy);

      (0, _chai.expect)(doneSpy.getCall(0).args[0]).to.contain('CssSyntaxError');
    });
  });
  describe('handle remian', function () {
    var doneSpy;
    beforeEach(function (done) {
      doneSpy = _sinon["default"].spy(function () {
        return done();
      });
      var webpackContext = webpackContextFactory({
        done: doneSpy
      });
      loaderFactory(webpackContext)(style.good);
    });
    it('should pass css without TPA params to next loader', function () {
      _sinon["default"].assert.calledOnce(doneSpy);

      (0, _chai.expect)(doneSpy.getCall(0).args[0]).to.eql(null);
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.not.contain('color');
    });
  });
  describe('handle inline', function () {
    var doneSpy;
    beforeEach(function (done) {
      doneSpy = _sinon["default"].spy(function () {
        return done();
      });
      var webpackContext = webpackContextFactory({
        done: doneSpy,
        query: 'mode=inline'
      });
      loaderFactory(webpackContext)(style.good);
    });
    it('should pass css with TPA params to next loader', function () {
      _sinon["default"].assert.calledOnce(doneSpy);

      (0, _chai.expect)(doneSpy.getCall(0).args[0]).to.eql(null);
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.contain('{{color-1}}');
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.contain('font:;{{Body-M}};');
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.contain('addStyles.js');
    });
    it('should support hmr', function () {
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.contain('if(module.hot)');
    });
    it('should accept hmr', function () {
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.contain('module.hot.accept()');
    });
    it('should trigger style change event', function () {
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.contain('window.postMessage');
      (0, _chai.expect)(doneSpy.getCall(0).args[1]).to.contain('window.Wix.Events.STYLE_PARAMS_CHANGE');
    });
  });
});