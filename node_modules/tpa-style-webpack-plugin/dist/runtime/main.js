var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { generateTPAParams } from './generateTPAParams';
import { getProcessor } from './processor';
import { cssFunctions } from './cssFunctions';
import { Plugins } from './plugins';
function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var plugins = new Plugins();
Object.keys(cssFunctions).forEach(function (funcName) { return plugins.addCssFunction(funcName, cssFunctions[funcName]); });
var defaultOptions = {
    isRTL: false,
    strictMode: true,
};
export function getProcessedCss(_a, options) {
    var siteColors = _a.siteColors, siteTextPresets = _a.siteTextPresets, styleParams = _a.styleParams;
    options = __assign(__assign({}, defaultOptions), options);
    var injectedData = '__COMPILATION_HASH__INJECTED_DATA_PLACEHOLDER';
    if (!injectedData.css) {
        return '';
    }
    var prefixedCss = injectedData.css.replace(new RegExp('__COMPILATION_HASH__', 'g'), options.prefixSelector ? "" + options.prefixSelector : '');
    var tpaParams = generateTPAParams(siteColors, siteTextPresets, styleParams, options);
    var processor = getProcessor({ cssVars: injectedData.cssVars, plugins: plugins });
    return injectedData.customSyntaxStrs.reduce(function (processedContent, part) {
        var newValue;
        try {
            newValue = processor.process({ part: part, tpaParams: tpaParams });
        }
        catch (e) {
            if (options.strictMode) {
                throw e;
            }
            else {
                newValue = '';
            }
        }
        return processedContent.replace(new RegExp(escapeRegExp(part), 'g'), newValue);
    }, prefixedCss);
}
export var getStaticCss = function (_a) {
    var prefixSelector = (_a === void 0 ? { prefixSelector: '' } : _a).prefixSelector;
    var injectedData = '__COMPILATION_HASH__INJECTED_STATIC_DATA_PLACEHOLDER';
    var prefixedCss = (injectedData.staticCss || '').replace(new RegExp('__COMPILATION_HASH__', 'g'), prefixSelector);
    return prefixedCss;
};
//# sourceMappingURL=main.js.map